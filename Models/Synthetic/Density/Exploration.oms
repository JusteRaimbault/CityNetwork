import java.text.SimpleDateFormat
import java.util.Date
import scala.sys.process._
import density._

logger.level("FINE")

// Parameters
val diffusion = Val[Double]
val diffusionsteps = Val[Double]
val alphalocalization = Val[Double]
val growthrate = Val[Double]
val population = Val[Double]

// Exploration
val replication = Val[Int]
val id=Val[Int]

// Reporters
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]
val rsquared=Val[Double]

// Model
val model =
  ScalaTask(
    """
      | val config = newFile()
      | val gen = new density.PADGeneratorLauncher
      | gen.main(100,input.population,input.diffusion,input.diffusionsteps,input.growthrate,input.alphalocalization,input.replication,config)
      | val moran = gen.moran
      | val distance = gen.distance
      | val entropy = gen.entropy
      | val slope = gen.slope
      | val rsquared = gen.rsquared
    """.stripMargin
  ) set (
    //imports += "density._",
    plugins += pluginsOf[density.PADGeneratorLauncher],
    inputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,id),
    outputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication,id),
    outputs += (moran,distance,entropy,slope,rsquared)
  )
//val modelCapsule = Capsule(model)


// Exploration
val exploration = ExplorationTask (
  /*LHS (
    1000,
    diffusion in Range(0.0, 0.5),
    alphalocalization in Range(0.1,4.0),
    growthrate in Range(500.0,30000.0),
    population in Range(10000.0,1000000.0),
    diffusionsteps in Range(1.0,5.0)
  ) withIndex id*/
  ((diffusion in (0.01 to 0.11 by 0.05)) x
  (diffusionsteps in (1.0 to 3.0 by 1.0)) x
  (alphalocalization in (0.5 to 2.5 by 1.0)) x
  (growthrate in (1000.0 to 11000.0 by 5000.0)) x
  (population in (100000.0 to 100000.0 by 1.0)) withIndex id)
  x (replication in (UniformDistribution[Int]() take 100))
)

//Replication
//val replicate = ExplorationTask(replication in (UniformDistribution[Int]() take 100)) set (
//  inputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,id),outputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,id,replication)
//)

val purpose = "REPLICATION_LOCAL"

val indics_hook = AppendToCSVFileHook(
    workDirectory / "res" / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv",
    diffusion,diffusionsteps,alphalocalization,growthrate,population,moran,distance,entropy,slope,rsquared,replication,id
)

//val replicationCapsule = replicate -< (modelCapsule hook indics_hook)


// Environement
val local = LocalEnvironment(50)
//val grid = EGIEnvironment("vo.complex-systems.eu", openMOLEMemory = 2400, wallTime = 24 hours)

//(exploration -< replicationCapsule) + (modelCapsule on grid by 1000)
exploration -< (model on local hook indics_hook)
