
;;;;;;;;;;;;;;;;;;;
;; Exploration utilities function
;;
;; as generic as possible, to be called in several situations
;;
;; Needs :
;;  - setup procedure (overall setup)
;;  - setup-exploration procedure
;;  - setup-final-indicators procedure
;;  - go-for-one-time-step
;;  - total-time-steps variable
;;
;;;;;;;;;;;;;;;;;;;




;;grid exploration with time series extraction
to grid-exploration-time-series [n-repets export-time-step param-names-and-bounds intermediate-reporter-names final-reporter-names output-file]
  
  ;;first setup infrastructure
  setup
  
  let res []
  
  let plan grid-experience-plan param-names-and-bounds

  let i 0
  foreach plan [
    ;;we insert in res for each repet, stat treatment will be done in external app
    let j 0
    repeat n-repets [
      let conf ?
      carefully [
        ;;sets vars
        foreach ? [run (word word word "set " (first ?) " " (last ?))]
        
        ;;special setup: some setup can have been changed according to params
        ;; this generic function has to exist
        setup-exploration
        
        repeat total-time-steps [
          go-for-one-time-step
          if ticks mod export-time-step = 1 [foreach intermediate-reporter-names [set conf lput (list (word ? ticks) (runresult ?)) conf]]
        ]
        foreach final-reporter-names [set conf lput (list ? (runresult ?)) conf]
        set res lput conf res
        ]
      [
        output-print error-message
        foreach final-reporter-names [set conf lput (list ? 0) conf]
        set res lput conf res
      ]
      output-print word "Completed " (100 * ((i + (j / n-repets) )/ length plan))
      set j j + 1
     ]
      output-print word "Completed " (100 * i / length plan)
    set i i + 1
    ]
  config-csv-export res ";" output-file
  
end













;;;;;;;;;;;;;;
;; Creation of experience plans
;;;;;;;;;;;;;;

;;from variables names, bounds and steps, reports experience plan under std format
to-report grid-experience-plan [variables]
  ;;[name,min,max,step]
  ;;let do it the "recursive-look-like" way, will be simpler to write ?
  ;;beware, need to iterate on sg, so double list here ! (logical regarding homogeneity!)
  let experience-plan [[]]
  foreach variables [
    set experience-plan extend-plan ? experience-plan
  ]
  
  ;;remove null plan !
  foreach experience-plan [if null-plan? ? [set experience-plan remove ? experience-plan]]
  
  report experience-plan
end

;;"recursive-look-like" aux -> makes product of existing plan with new variable
to-report extend-plan [variable old-plan]
   let name item 0 variable let mi item 1 variable let ma item 2 variable let step item 3 variable
   let res []
   foreach old-plan [
      let curval mi
      repeat floor ((ma - mi)/ step) + 1 [
         set res lput (sentence ? (list (list name curval))) res
         set curval curval + step
      ]
   ]
   report res
end

to-report null-plan? [conf]
  let res true foreach conf [set res (res and (last ? = 0))] report res
end


;;;;;;;;;;;;;;;;
;; export
;;;;;;;;;;;;;;;

;;format for values of outputs and params will be the same as for only params !
to config-csv-export [config separator filename]
  ;;first get name of vars to write first line
  ;;rq: we suppose that export is done in same order !!!
  let first-line ""
  foreach first config [set first-line word first-line first ? if ? != last first config [set first-line word first-line separator]]
  print-in-file filename first-line
  foreach config [
    let line ""
    let lst last ?
    foreach ? [set line word line last ? if ? != lst [set line word line separator]]
    print-in-file filename line
  ] 
end
