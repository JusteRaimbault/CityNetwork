
// Parameters
val regionalproba = Val[Double]
val lambdaacc = Val[Double]
val euclpace = Val[Double]
val game = Val[Double]
val constrcost = Val[Double]
val collcost=Val[Double]
val targetNetwork = Val[Int]
val setupType = Val[Int]
val finalTime = Val[Int]

val id = Val[Int]
val replication = Val[Int]


// reporters
val accessibilityTS=Val[Array[Double]]
val traveldistanceTS=Val[Array[Double]]

// morphological : evolution of urban form
//"moran-actives" "entropy-actives" "slope-actives" "slope-rsquared-actives" "mean-distance-actives"
//"moran-employments" "entropy-employments" "slope-employments" "slope-rsquared-employments" "mean-distance-employments"
val moranActivesTS = Val[Array[Double]]
val entropyActivesTS = Val[Array[Double]]
val slopeActivesTS = Val[Array[Double]]
val slopeRsquaredActiveTS = Val[Array[Double]]
val meanDistanceEmploymentsTS = Val[Array[Double]]
val moranEmploymentsTS = Val[Array[Double]]
val entropyEmploymentsTS = Val[Array[Double]]
val slopeEmploymentsTS = Val[Array[Double]]
val slopeRsquaredEmploymentsTS = Val[Array[Double]]
val meanDistanceEmploymentsTS = Val[Array[Double]]


val stability=Val[Double]
val gametype=Val[String]
val expcollab=Val[Double]
val wantedcollab=Val[Double]
val realcollab=Val[Double]
val failed=Val[Double]
val targetDistance = Val[Double]


// regionalproba lambdaacc euclpace game constr-cost coll-cost target-network setuptype finalTime rnd-seed
val cmds = List(
  "setup-experiment ${regionalproba} ${lambdaacc} ${euclpace} ${game} ${constrcost} ${collcost} ${targetNetwork} ${setupType} ${finalTime} ${replication}",
  "run-experiment"
)

val model = NetLogo5Task.workspace(workDirectory,"HEADLESS_Lutecia.nlogo",cmds) set(
  inputs += (regionalproba,lambdaacc,euclpace,game,constrcost,collcost,targetNetwork,setupType,replication,id),
  outputs += (regionalproba,lambdaacc,euclpace,game,constrcost,collcost,targetNetwork,setupType,replication,id),
  netLogoOutputs += ("ts-indicator \"mean-accessibility patches\"", accessibility),
  netLogoOutputs += ("ts-indicator \"mean-travel-distance\"", traveldistance),
  netLogoOutputs += ("ts-indicator \"moran-actives\"", moranActivesTS),
  netLogoOutputs += ("ts-indicator \"entropy-actives\"", entropyActivesTS),
  netLogoOutputs += ("employments-entropy", empentropy),
  netLogoOutputs += ("stability",stability),
  netLogoOutputs += ("regional-decision-proba", regionalproba),
  netLogoOutputs += ("lambda-accessibility", lambdaacc),
  netLogoOutputs += ("euclidian-min-pace", euclpace),
  netLogoOutputs += ("game-type", gametype),
  netLogoOutputs += ("construction-cost", constrcost),
  netLogoOutputs += ("collaboration-cost", collcost),
  netLogoOutputs += ("expected-collaboration-rate", expcollab),
  netLogoOutputs += ("wanted-collaboration-rate", wantedcollab),
  netLogoOutputs += ("realized-collaboration-rate", realcollab),
  netLogoOutputs += ("target-network-distance",targetDistance),
  netLogoOutputs += ("failed", failed)
)
