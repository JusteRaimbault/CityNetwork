
;;;;;;;;;;;;;;;;;;;;;;
;; Generic NW functions
;;;;;;;;;;;;;;;;;;;;;;




;;
; Planarize a network, by simply "flattening the bridges" == creating intersection for crossing links
;
;  Necessarily in O(#(edges-agentset)^2) as have to checkall intersections between links.
to network-utils:planarize-network [vertices-agentset edges-agentset]
  
  ;; gore way ?
  let links-breed agentset-uniform-singular-breed edges-agentset
  
  let edge-list to-list edges-agentset
  let current-inter get-first-inter edge-list
  while [length current-inter > 0][
      let x first first current-inter let y last first current-inter let coords list x y let l1 item 1 current-inter let l2 last current-inter 
      let t11 [end1] of l1 let t12 [end2] of l1 let t21 [end1] of l2 let t22 [end2] of l2
      let new-inter nobody ;need to hatch
      
;      ifelse compare t11 coords or compare t12 coords or compare t21 coords or compare t22 coords [
;          ifelse compare t11 coords or compare t12 coords[
;            ifelse compare t11 coords [
;              ask t11 [ask t21 [run (word "create-" links-breed "-with myself")] ask t22 [run (word "create-" links-breed "-with myself")]]
;              set edge-list remove l2 edge-list
;              set edge-list concatenate (list edge-list (to-list [my-links] of t11))
;              ask l2 [die]
;            ][
;              ask t12 [ask t21 [run (word "create-" links-breed "-with myself")] ask t22 [run (word "create-" links-breed "-with myself")]]
;              set edge-list remove l2 edge-list
;              set edge-list concatenate (list edge-list (to-list [my-links] of t12))
;              ask l2 [die]
;            ]
;          ][
;            ifelse compare t21 coords [
;              ask t21 [ask t11 [run (word "create-" links-breed "-with myself")] ask t12 [run (word "create-" links-breed "-with myself")]]
;              set edge-list remove l1 edge-list
;              set edge-list concatenate (list edge-list (to-list [my-links] of t21))
;              ask l1 [die]
;            ][
;              ask t22 [ask t11 [run (word "create-" links-breed "-with myself")] ask t12 [run (word "create-" links-breed "-with myself")]]
;              set edge-list remove l1 edge-list
;              set edge-list concatenate (list edge-list (to-list [my-links] of t22))
;              ask l1 [die]
;            ]
;          ]
;      ][

        ask t11 [hatch 1 [set new-inter self setxy first first current-inter last first current-inter]]
        ask new-inter [
          ask t11 [run (word "create-" links-breed "-with myself")]
          ask t12 [run (word "create-" links-breed "-with myself")]
          ask t21 [run (word "create-" links-breed "-with myself")]
          ask t22 [run (word "create-" links-breed "-with myself")]
        ]
        ;remove and kill
        set edge-list concatenate (list edge-list (to-list [my-links] of new-inter))
        set edge-list remove l2 remove l1 edge-list
        ask l1 [die] ask l2 [die]
        
      ;]
      
      set current-inter get-first-inter edge-list
  ]
  
;  
;  let remaining-edges to-list edges-agentset
;  
;  ; get breeds
;  let vertices-breed agentset-uniform-breed vertices-agentset
;  ; rq : with hatch the vertices-breed should not be needed ?
;  set links-breed agentset-uniform-singular-breed edges-agentset
;  
;  while [length remaining-edges > 0][
;    let current-edge first remaining-edges set remaining-edges remove-item 0 remaining-edges
;    let to-remove [] let to-add [] let found? false
;    foreach remaining-edges [
;      if not found? [
;        let inter intersection-with-link ? current-edge
;        ;if length inter > 0 [user-message (word current-edge ? inter)]
;        if length inter > 0 [
;           let t11 [end1] of ? let t12 [end2] of ? let t21 [end1] of current-edge let t22 [end2] of current-edge
;           ; create the new intersection and connects it
;           ; dirty because string runs cannot interact with local variables -> use ask to access ends
;           let new-inter nobody ;need to hatch
;           ask t11 [hatch 1 [set new-inter self setxy first inter last inter]]
;           ask new-inter [
;             ask t11 [run (word "create-" links-breed "-with myself")]
;             ask t12 [run (word "create-" links-breed "-with myself")]
;             ask t21 [run (word "create-" links-breed "-with myself")]
;             ask t22 [run (word "create-" links-breed "-with myself")]
;           ]
;           ; add links of new-inter
;           set to-add concatenate (list to-add (to-list [my-links] of new-inter))
;           set to-remove lput ? to-remove
;           set found? true
;       ]
;      ]
;    ]
;    
;    ;;add and remove edges
;    foreach to-add [set remaining-edges lput ? remaining-edges]
;    foreach to-remove [set remaining-edges remove ? remaining-edges ask ? [die]]
;    if found? [ask current-edge [die]]
;  ]
  
end

;;
;
;to-report compare [agent coords]
;  report (sqrt ( ([xcor] of agent - first coords) ^ 2 + ([ycor] of agent - last coords)^ 2) < 0.5)
;end

to-report get-first-inter [link-list]
  let n length link-list let i 0 let j 0
  repeat (n - 1)[
     set j i + 1
     repeat (n - i - 1) [
       let inter strict-intersection-with-link item i link-list item j link-list
       ;let inter intersection-with-link item i link-list item j link-list     
       
       if length inter > 0 [report (list inter  item i link-list  item j link-list)]
       set j j + 1
     ]
     set i i + 1 
  ]
  report []
end






;;;;;;;;;;;;;
;; Connexify nw following std algo 
;;
;; Uses provided turtles and links agentsets.
;
;  Note : resulting nw is not necessary planar ! -> planification primitive, better be separated for more flexibility<
;;;;;;;;;;;;
to connexify-network [vertices-agentset edges-agentset]
  nw:set-context vertices-agentset edges-agentset
  let clusters nw:weak-component-clusters
  
  let links-breed agentset-uniform-singular-breed edges-agentset
  
  while [length clusters > 1] [
    let c1 first clusters
    let mi sqrt (world-width ^ 2 + world-height ^ 2) ;biggest possible distance
    ; rq : obliged to go through all pairs in nw. the same as merging clusters and taking closest point
    ; second alternative is less dirty in writing but as merging is O(n^2), should be longer.
    let mc1 nobody let mc2 nobody
    foreach but-first clusters [
       let c2 ?
       ask c1 [ask c2 [let d distance myself if d < mi [set mi d set mc1 myself set mc2 self]]]
    ]
    ask mc1 [
      ; create link : need to find the breed of used links
      run (word "create-" links-breed "-with mc2")
    ]
    set clusters nw:weak-component-clusters
  ]
  
end





to network-utils:simplify-network 
  
  let n count transportation-nodes with [count transportation-nodes-here > 1]
  while [n > 0] [
     let current-node one-of transportation-nodes with [count transportation-nodes-here > 1]
     let to-connect [] ask current-node [
       ask other transportation-nodes-here [
          ask my-transportation-links with [[patch-here] of other-end != [patch-here] of myself] [set to-connect lput other-end to-connect die] die
       ]
       foreach to-connect [if not transportation-link-neighbor? ? [create-transportation-link-with ?]]
     ]
     set n count transportation-nodes with [count transportation-nodes-here > 1]
  ]
end









