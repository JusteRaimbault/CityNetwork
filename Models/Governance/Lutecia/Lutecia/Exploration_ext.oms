import java.util.Date
import java.text.SimpleDateFormat

// Parameters
val regionalproba = Val[Double]
val lambdaacc = Val[Double]
val euclpace = Val[Double]
val game = Val[Int]
val replication = Val[Int]


// exploration task

//-------------------------------------------------------
// TEST
/*val exploration =  ExplorationTask(
  (regionalproba in (0.0 to 0.0 by 1)) x
  (lambdaacc in (0.05 to 0.05 by 1)) x
  (euclpace in (5.0 to 5.0 by 1)) x
  (game in (0 to 1 by 1)) x
  (replication in (UniformDistribution[Int]() take 4))
)

val purpose = "test"
*/
//--------------------------------------------------------

//-------------------------------------------------------
// GRID
val exploration =  ExplorationTask(
  LHS (
    200,
    lambdaacc in Range(0.001,0.01),
    euclpace in Range(2.5,5.0)
  ) x (regionalproba in (0.0 to 0.5 by 0.5)) x (game in (0 to 2 by 1)) x (replication in (UniformDistribution[Int]() take 10))
)

val purpose = "lhsgrid"

//--------------------------------------------------------



// reporters
val accessibility=Val[Double]
val traveldistance=Val[Double]
val activesentropy=Val[Double]
val empentropy=Val[Double]
val stability=Val[Double]
val gametype=Val[String]
val expcollab=Val[Double]
val wantedcollab=Val[Double]
val realcollab=Val[Double]
val extdecrepitude=Val[Double]
val failed=Val[Double]

//NetLogo go for one time step
val cmds = List(
  "setup-openmole-experiment ${regionalproba} ${lambdaacc} ${euclpace} ${game}",
  "go-openmole-experiment"
)


val scriptPath = System.getenv("CN_HOME")+"/Models/Governance/MetropolSim/MetropolSim3/HEADLESS_MetropolSim3.nlogo"

val model = NetLogo5Task(scriptPath,cmds,true) set (
  inputs += (regionalproba, lambdaacc, euclpace,game),
  netLogoOutputs += ("mean-accessibility patches", accessibility),
  netLogoOutputs += ("mean-travel-distance", traveldistance),
  netLogoOutputs += ("actives-entropy", activesentropy),
  netLogoOutputs += ("employments-entropy", empentropy),
  netLogoOutputs += ("stability",stability),
  netLogoOutputs += ("regional-decision-proba", regionalproba),
  netLogoOutputs += ("lambda-accessibility", lambdaacc),
  netLogoOutputs += ("euclidian-min-pace", euclpace),
  netLogoOutputs += ("game-type", gametype),
  netLogoOutputs += ("expected-collaboration-rate", expcollab),
  netLogoOutputs += ("wanted-collaboration-rate", wantedcollab),
  netLogoOutputs += ("realized-collaboration-rate", realcollab),
  netLogoOutputs += ("externality-decrepitude", extdecrepitude),
  netLogoOutputs += ("failed", failed)
)

// output
val h = AppendToCSVFileHook("res_oml/"+((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv")



val startTime = System.currentTimeMillis

// environement
val env = LocalEnvironment(20)

logger.level("FINE")

val exec = exploration -< (model on env hook h) start

exec.waitUntilEnded

println("Ellapsed Time is "+(System.currentTimeMillis - startTime) / 1000.0)
