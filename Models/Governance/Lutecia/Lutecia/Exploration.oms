
import java.util.Date
import java.text.SimpleDateFormat

logger.level("FINE")



// Parameters
val regionalproba = Val[Double]
val lambdaAcc = Val[Double]
val euclpace = Val[Double]
val game = Val[Double]
val collcost=Val[Double]
val roadLength = Val[Double]
val gammaCDA=Val[Double]
val gammaCDE=Val[Double]
val betaDC=Val[Double]
val relocationRate=Val[Double]

val evolveNetwork = Val[Int]
val evolveLanduse = Val[Int]
val targetNetwork = Val[Int]
val setupType = Val[Int]
val synthConfFile = Val[String]
val stopType = Val[String]
val finalValue = Val[Int]

val id = Val[Int]
val replication = Val[Int]


// reporters : time series
val accessibilityTS=Val[Array[Double]]
val accessibilityBalanceTS=Val[Array[Double]]
val minAccessibilityTS = Val[Array[Double]]
val maxAccessibilityTS = Val[Array[Double]]
val traveldistanceTS=Val[Array[Double]]
val stabilityTS=Val[Array[Double]]
val meanFlowTS = Val[Array[Double]]
val minFlowTS = Val[Array[Double]]
val maxFlowTS = Val[Array[Double]]

// morphological : evolution of urban form
//"moran-actives" "entropy-actives" "slope-actives" "slope-rsquared-actives" "mean-distance-actives"
//"moran-employments" "entropy-employments" "slope-employments" "slope-rsquared-employments" "mean-distance-employments"
val moranActivesTS = Val[Array[Double]]
val entropyActivesTS = Val[Array[Double]]
val slopeActivesTS = Val[Array[Double]]
val slopeRsquaredActivesTS = Val[Array[Double]]
val meanDistanceActivesTS = Val[Array[Double]]
val moranEmploymentsTS = Val[Array[Double]]
val entropyEmploymentsTS = Val[Array[Double]]
val slopeEmploymentsTS = Val[Array[Double]]
val slopeRsquaredEmploymentsTS = Val[Array[Double]]
val meanDistanceEmploymentsTS = Val[Array[Double]]
val meanDistanceCentreActivesTS = Val[Array[Double]]
val meanDistanceCentreEmploymentsTS = Val[Array[Double]]
val centreActivesPropTS = Val[Array[Double]]
val centreEmploymentsPropTS = Val[Array[Double]]
val relDiffActivesTS = Val[Array[Double]]
val relDiffEmploymentsTS = Val[Array[Double]]

// network indicators
//total-nw-length mean-relative-speed mean-closeness-centrality mean-bw-centrality mean-path-length nw-diameter
val nwLength = Val[Double]
val nwRelativeSpeed = Val[Double]
val nwCloseness = Val[Double]
val nwAlphaCloseness = Val[Double]
val nwBetweenness = Val[Double]
val nwAlphaBetweenness = Val[Double]
val nwPathLength = Val[Double]
val nwDiameter = Val[Double]

// other indicators
val gametype=Val[String]
val expcollab=Val[Double]
val wantedcollab=Val[Double]
val realcollab=Val[Double]
val failed=Val[Double]
val targetDistance = Val[Double]


// regionalproba lambdaacc nwspeed game coll-cost roadLength gammaCDA gammaCDE betaDC relocationRate evolveNetwork evolveLanduse target-network setuptype conffile stoptype finalValue rnd-seed
val cmds = List(
  "setup-experiment ${regionalproba} ${lambdaAcc} ${euclpace} ${game} ${collcost} ${roadLength} ${gammaCDA} ${gammaCDE} ${betaDC} ${relocationRate} ${evolveNetwork} ${evolveLanduse} ${targetNetwork} ${setupType} \"${synthConfFile}\" \"${stopType}\" ${finalValue} ${replication}",
  "run-experiment"
)

val model = NetLogo5Task.workspace(workDirectory,"HEADLESS_Lutecia.nlogo",cmds) set(
  inputs += (regionalproba,lambdaAcc,euclpace,game,collcost,roadLength,gammaCDA,gammaCDE,betaDC,relocationRate,evolveNetwork,evolveLanduse,targetNetwork,setupType,synthConfFile,stopType,finalValue,replication,id),
  outputs += (regionalproba,lambdaAcc,euclpace,game,collcost,roadLength,gammaCDA,gammaCDE,betaDC,relocationRate,evolveNetwork,evolveLanduse,targetNetwork,setupType,synthConfFile,stopType,finalValue,replication,id),
  netLogoOutputs += ("ts-indicator \"overall-mean-accessibility\"", accessibilityTS),
  netLogoOutputs += ("ts-indicator \"mean-accessibility-balance\"", accessibilityBalanceTS),
  netLogoOutputs += ("ts-indicator \"mean-travel-distance\"", traveldistanceTS),
  netLogoOutputs += ("ts-indicator \"stability\"",stabilityTS),
  netLogoOutputs += ("ts-indicator \"mean-flow\"",meanFlowTS),
  netLogoOutputs += ("ts-indicator \"min-flow\"",minFlowTS),
  netLogoOutputs += ("ts-indicator \"max-flow\"",maxFlowTS),
  netLogoOutputs += ("ts-indicator \"moran-actives\"", moranActivesTS),
  netLogoOutputs += ("ts-indicator \"entropy-actives\"", entropyActivesTS),
  netLogoOutputs += ("ts-indicator \"slope-actives\"", slopeActivesTS),
  netLogoOutputs += ("ts-indicator \"slope-rsquared-actives\"", slopeRsquaredActivesTS),
  netLogoOutputs += ("ts-indicator \"mean-distance-actives\"", meanDistanceActivesTS),
  netLogoOutputs += ("ts-indicator \"moran-employments\"", moranEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"entropy-employments\"", entropyEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"slope-employments\"", slopeEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"slope-rsquared-employments\"", slopeRsquaredEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"mean-distance-employments\"", meanDistanceEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"mean-distance-to-centre-actives\"", meanDistanceCentreActivesTS),
  netLogoOutputs += ("ts-indicator \"mean-distance-to-centre-employments\"", meanDistanceCentreEmploymentsTS),
  netLogoOutputs += ("ts-indicator \"center-actives-prop\"", centreActivesPropTS),
  netLogoOutputs += ("ts-indicator \"center-employments-prop\"", centreEmploymentsPropTS),
  netLogoOutputs += ("ts-indicator \"rel-diff-actives\"",relDiffActivesTS),
  netLogoOutputs += ("ts-indicator \"rel-diff-employments\"",relDiffEmploymentsTS),
  netLogoOutputs += ("total-nw-length",nwLength),
  netLogoOutputs += ("mean-relative-speed",nwRelativeSpeed),
  netLogoOutputs += ("mean-closeness-centrality",nwCloseness),
  netLogoOutputs += ("alpha-closeness-centrality",nwAlphaCloseness),
  netLogoOutputs += ("mean-bw-centrality",nwBetweenness),
  netLogoOutputs += ("alpha-bw-centrality",nwAlphaBetweenness),
  netLogoOutputs += ("mean-path-length",nwPathLength),
  netLogoOutputs += ("nw-diameter",nwDiameter),
  netLogoOutputs += ("game-type", gametype),
  netLogoOutputs += ("expected-collaboration-rate", expcollab),
  netLogoOutputs += ("wanted-collaboration-rate", wantedcollab),
  netLogoOutputs += ("realized-collaboration-rate", realcollab),
  netLogoOutputs += ("target-network-distance",targetDistance),
  netLogoOutputs += ("failed", failed)
)




// exploration task

//regionalproba,lambdaAcc,euclpace,game,constrcost,collcost,gammaCDA,gammaCDE,betaDC,relocationRate,evolveNetwork,targetNetwork,setupType,synthConfFile,finalTime

val exploration =  ExplorationTask(
  (((regionalproba in (0.0 to 1.0 by 0.05)) x
    //(lambdaAcc in (0.002 to 0.01 by 0.002)) x
    //(euclpace in (2.0 to 6.0 by 2.0)) x
    //(game in (1 to 2 by 1)) x
    //(collcost in (0.00005 to 0.00013 by 0.00002))x
    //(gammaCDA in (0.1 to 1.0 by 0.1))x
    //(gammaCDE in (0.1 to 1.0 by 0.1))x
    //(betaDC in (0.5 to 2.0 by 0.5))x
    (evolveLanduse in Seq(0,1))x
    //(synthConfFile in Seq("setup/conf/synth_nonw.conf","setup/conf/synth_cross.conf","setup/conf/synth_spider.conf"))
    (synthConfFile in Seq("setup/conf/synth_unbalanced_close.conf","setup/conf/synth_unbalanced_distant.conf"))
  ) withIndex id )
  /*((LHS (
    5000
    ,regionalproba in Range(0.0,1.0)
    //,lambdaAcc in Range(0.001,0.01)
    //,euclpace in Range(2.5,10.0)
    //,game in Range(1.0,2.999)
    //,collcost in Range(0.0,0.006)
    //,roadLength in Range(0.5,2.5)
    //,gammaCDA in Range(0.5,1.0)
    //,gammaCDE in Range(0.5,1.0)
    //,betaDC in Range(0.5,2.0)
  )) withIndex id)*/
  //x (regionalproba is 1.0)
  //x (regionalproba in (0.0 to 1.0 by 1.0))
  x (lambdaAcc is 0.005)
  x (euclpace is 6.0)
  x (game is 0.5)
  x (collcost is 0.0001)
  x (roadLength is 1.0)
  x (gammaCDA is 0.9)
  x (gammaCDE is 0.65)
  x (betaDC is 1.8)
  x (relocationRate is 0.1)
  x (evolveNetwork is 1)
  //x (evolveNetwork is 0)
  //x (evolveLanduse is 1)
  x (targetNetwork is 1)
  //x (setupType is 2)
  x (setupType is 1)
  //x (synthConfFile is "setup/conf/synth_nonw.conf")
  x (stopType is "time")
  //x (stopType is "infrastructure-stock")
  x (finalValue is 20)
  x (replication in (UniformDistribution[Int]() take 10))
)


//val purpose = "test_realnonw"
//val purpose = "lhs"
//val purpose = "grid_realnonw"
//val purpose = "grid_sprawl"
//val purpose = "grid_synth"
val purpose = "local_synth"


// output
val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv") set (
  arraysOnSingleRow := true
)



//val local = LocalEnvironment(50)
val grid = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 4000 megabytes)

//exploration -< (model on local hook indics_hook)
exploration -< (model on grid by 10 hook indics_hook)
