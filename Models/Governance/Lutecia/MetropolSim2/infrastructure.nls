


;;
; Ask given maire to find and create best infrastructure.
;
;;
to creerInfrastructureR [temp-maire]
  let bestPaire1 0
  let bestPaire2 0
  
  ; best Benefits-Costs Ratio
  let bestBCR -1000
  
  let temp-cost 0
  let temp-benefit 0
  
  updateListCoutTransportsPatches temp-maire false
  updateAccessibilitePatches temp-maire
  ;let accesOld calculerAccessibilite "region" 1
  ;let accesOld sum [(sum listAnbrM + sum listAnbrR) * accessibilitePatches] of patches
  ;;;;;;;;;;;;show accesOld
  ;let accesOld 0
  
  let accesOld reportAccessibilite temp-maire
  
  ;ifelse is-maire? temp-maire [
  ;set accesOld sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches with [mairePatch = temp-maire]
  ;;set accesOld sum [sum listCoutTransportEffectifTemp] of patches with [mairePatch = temp-maire]
  ;][
  ;set accesOld sum [(sum listAnbrM + sum listAnbrR) * sum accessibilitePatches] of patches
  ;;set accesOld sum [sum listCoutTransportEffectif] of patches
  ;]
  ;;;;;;;;;;;;show "temps total de transport des administr�s"
  ;;;;;;;show "accessibilite"
  ;;;;;;;show accesOld
  
  
  
    ask patches with [has-node? = 1 or has-maire? = 1] [
      if not is-maire? temp-maire or mairePatch = temp-maire [
        let patchA self
          ask neighbors [
            if not is-maire? temp-maire or mairePatch = temp-maire [
               let patchB self
               let attributs (list 0 3 100 0)
               ifelse is-maire? temp-maire [set attributs lput 115 attributs][set attributs lput 15 attributs]
  
               set temp-benefit ((evaluerBeneficeInfrastructure patchA patchB attributs temp-maire 0) - accesOld)
            ; signe - pour les temps de transport: on cherche soit � maximiser l'accessibilit� totale, soit � minimiser le temps de transport total...
        ;      ;;;;;;;;;;;;;;;show tempB
        
               set temp-cost evaluerCoutInfrastructure patchA patchB 0
               ;show "gain accessibilit� possible"
               ;show tempB
              if (temp-benefit / temp-cost) > bestBCR [    
                  set bestBCR (temp-benefit / temp-cost)
                  set bestPaire1 patchA
                  set bestPaire2 patchB
               ]
          ]
        ]
      ]
    ]
  
  
  
  ask nodes with [tempNode? = 1] [die]
  
  if true [;bestBCR > 1 [
  let attributs (list 0 3 100 0)
  ifelse is-maire? temp-maire [set attributs lput 115 attributs][set attributs lput 15 attributs]
    creerInfrastructure bestPaire1 bestPaire2 attributs 0
    ; infrastructures are not directed, no need to double !
    ;creerInfrastructure bestPaire2 bestPaire1 attributs 0
  ]
  
  
  ; @ TODO : why repetition of above ? -> not needed
;  ask nodes with [tempNode? = 1] [die]
;  if true [;bestBCR > 1 [
;  let attributs (list 0 3 100 0)
;  
;  creerInfrastructure bestPaire1 bestPaire2 attributs 0
;  creerInfrastructure bestPaire2 bestPaire1 attributs 0
;  ]


end
