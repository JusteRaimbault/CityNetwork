
;;;;;;;;;;;;;;;;;
;; land-use
;;;;;;;;;;;;;;;;;


;;
; Land-use evolution
;
;;
to land-use
  
  ; iterations : should converge
  repeat 10 [
    ;iterations actives
    repeat 10 [
      updateUtilites
      mouvementsActifs
      displayActifs
    ]
  
    ; iterations employment
    repeat 10 [
      updateUtilites
      mouvementsEmplois
      displayEmplois
    ]
    
    ; update plot for convergence study
    plot-convergence-land-use
    ; update patch coloring
    color-patches
    
  ]


end



;;
; Update utilities
;
to updateUtilites
  updateDensityActifs
  updateDensityEmplois
  updateutiliteActifs
  updateutiliteEmplois
end





;;
;  Move actives for each CSP.
;
;  Discrete choice model following utilities of actives (list-A-Utilite-R) and corresponding coefs.
;  All actives are repositioned proportionaly to DC proba on each patch.
;
;;
to mouvementsActifs
  ; in the case of social housing, must be evoked here, with list-A-nbr-M ; for now nothing of that.


  let c 0
  let temp 0
  ; variable used to study convergence
  ; will be 2* real movement (as = sum abs (Delta ) on all patches, but -> 0 anyway )
  set moving-actives 0
  
  ; for each csp
  while [c < Ncsp] [
    set temp 0
    ask patches [
      set temp temp + exp (item c listcoeffUtilitesActifs * item c list-A-Utilite-R)
    ]
    ; temp = \sum_{patches}{exp(\beta(csp)U(csp,actives))}
    
    ;;;;show temp
    
    
    
    ;; discrete choice proportion of actives for each patch
    ask patches [
      ;set plabel int ( 100 * exp (item c listcoeffUtilitesActifs * item c listAUtiliteR) / temp )  / 100
      let prev-A-nbr list-A-nbr-R
      set list-A-nbr-R replace-item c list-A-nbr-R (item c listNactifs * exp (item c listcoeffUtilitesActifs * item c list-A-Utilite-R) / temp)
      set moving-actives moving-actives + abs (item c prev-A-nbr - item c list-A-nbr-R)
      ;;;;show listAnbrR
    ]
    set c c + 1
  ]

end




;;
; Move jobs (employment) for each csp.
;
; See mouvementsActifs, exactly same procedure.
;
;;
to mouvementsEmplois

  let c 0
  let temp 0
  set moving-employment 0
  
  while [c < Ncsp] [
  set temp 0
    ask patches [
      set temp temp + exp (item c listcoeffUtilitesEmplois * item c list-E-Utilite-R)
    ]
    ;;;show temp
    ask patches [
      let prev-E-nbr list-E-nbr
      set list-E-nbr replace-item c list-E-nbr (item c listNactifs * exp (item c listcoeffUtilitesEmplois * item c list-E-Utilite-R) / temp)
      set moving-employment moving-employment + abs (item c prev-E-nbr - item c list-E-nbr)
    ]
    set c c + 1
  ]
end




;;
; Update density of actives
;
;;
to updateDensityActifs
  let tempActifs 0
  ask patches [
    
    let c 0
    set listDensiteActifs [] ; list of densities by CSP
    ; for each csp
    while [c < Ncsp][
      let j 0
      set tempActifs 0
       ; for each patch (other !)
       while [j < length listPatchesRegion] [
        let m 0
        ; for each mode
        while [m < nModes] [
          let tempShare item j item c item m listModesShare ; list mode share : (mode,csp,patch) from this patch
          
          ; @TODO  -- NOT USED --
          ;let tempCout coutDistance (item j item c item m listCoutTransport)
          
          ;set tempActifs tempActifs + tempShare * (item c [listAnbrR] of item j listPatchesRegion + item c [listAnbrM] of item j listPatchesRegion) * tempCout
           
           ; check if we are dealing with another patch
           ifelse item j listPatchesRegion = self [
              set tempActifs tempActifs +  (item c list-A-nbr-R + item c list-A-nbr-M)
           ][
              ; just weight by distance : no transportation cost ?
              set tempActifs tempActifs + (item c [list-A-nbr-R] of item j listPatchesRegion + item c [list-A-nbr-M] of item j listPatchesRegion) / distance item j listPatchesRegion 
           ]
           set m m + 1
        ]
        set j j + 1
      ]
      set listDensiteActifs lput tempActifs listDensiteActifs
      set c c + 1
    ]
    
  ]

end




;;
; Update density of employment.
;
;;
to updateDensityEmplois

  let tempEmplois 0
  ask patches [
    let c 0
    set listDensiteEmplois []
    
    ; same procedure as for actives
    while [c < Ncsp] [
      let j 0
      set tempEmplois 0
      while [j < length listPatchesRegion] [
        ;for each mode
        let m 0
        while [m < nModes] [
          let tempShare item j item c item m listModesShare
          let tempCout coutDistance(item j item c item m listCoutTransport)
          ;set tempEmplois tempEmplois + tempShare * (item c [listEnbr] of item j listPatchesRegion) * tempCout
          ifelse item j listPatchesRegion = self[
            set tempEmplois tempEmplois +  (item c list-E-nbr)
           ]
           [
           set tempEmplois tempEmplois + (item c [list-E-nbr] of item j listPatchesRegion) / distance item j listPatchesRegion 
           ]
          
          
          set m m + 1
        ]
        set j j + 1
      ]
      set listDensiteEmplois lput tempEmplois listDensiteEmplois
      set c c + 1
    ]
  
  ]

end






;;
; Update utility lists of patches for actives.
; 
;  Compute list per csp for each patch using land-use.calculerutiliteActifs(csp), then normalize to have an utility \in [0,1].
;  Updates patch variable list-A-utilite-R
;
;;
to updateUtiliteActifs
  let tempL rep 0 Ncsp
  let c 0
  
  ; compute utility of actives for each patch and each csp, and sum of utilities on all patches
  ask patches [
    set c 0
    while [c < Ncsp] [
      ;set listAutiliteM replace-item c listAutiliteM item c listAutiliteM ; does nothing
      set list-A-utilite-R replace-item c list-A-utilite-R calculerutiliteActifs c
      set tempL replace-item c tempL (item c tempL + item c list-A-utilite-R)
      set c c + 1
    ]
  ]
  
  ;; normalize utilities
  ask patches [
    set c 0
    while [c < Ncsp] [
      ;set listAutiliteM replace-item c listAutiliteM item c listAutiliteM
      set list-A-utilite-R replace-item c list-A-utilite-R (item c list-A-utilite-R / item c tempL )
      set c c + 1
    ]
  ]

end




;;
;  Update employement utility lists.
; 
;   See land-use.updateUtiliteActifs, same procedure.
;
;;
to updateUtiliteEmplois
  let tempL rep 0 Ncsp
  let c 0
  
  ask patches [
    set c 0
    while [c < Ncsp] [
      ;set list-E-utilite-M replace-item c list-E-utilite-M item c list-E-utilite-M ; does nothing
      set list-E-utilite-R replace-item c list-E-utilite-R calculerUtiliteEmplois c
      set tempL replace-item c tempL (item c tempL + item c list-E-utilite-R)
      set c c + 1
    ]
  ]
  
  ask patches [
    set c 0
    while [c < Ncsp] [
      ;set listEutiliteM replace-item c listEutiliteM item c listEutiliteM
      set list-E-utilite-R replace-item c list-E-utilite-R (item c list-E-utilite-R / item c tempL )
      set c c + 1
    ]
  ]

end









;;
; Compute Utilities of actives by csp for calling patch.
;
; @param csp
; @return utility
;;
to-report calculerutiliteActifs [csp]
  ; get accessibility for this csp from accessibility list
  let acces item csp AccessibilitePatches
  let forme 1
  
  let c 0
  while [c < nCSP] [
  
      if item c listDensiteActifs > 0 [
      set forme forme * exp(item c item csp matActifsActifs * ln(item c listDensiteActifs))
      ]
      if item c listDensiteEmplois > 0 [
      set forme forme * exp(item c item csp matActifsEmplois * ln(item c listDensiteEmplois))
      ] 
    set c c + 1
  ]
  ;coeffAccessibiliteFormeUrbaine
  report exp(item csp listcoeffAccessibiliteFormeUrbaineActifs * ln(acces)) * exp((1 - item csp listcoeffAccessibiliteFormeUrbaineActifs) * ln(forme))
end



;;
; See calculerutiliteActifs
;  (idem emplois)
to-report calculerutiliteEmplois [csp]
let acces item csp AccessibilitePatches
let forme 1

let c 0
while [c < nCSP] [

    if item c listDensiteActifs > 0 [
    set forme forme * exp(item c item csp matEmploisActifs * ln(item c listDensiteActifs))
    ]
    if item c listDensiteEmplois > 0 [
    set forme forme * exp(item c item csp matEmploisEmplois * ln(item c listDensiteEmplois))
    ] 
    ;;;;show forme
  set c c + 1
]
;;show forme
;coeffAccessibiliteFormeUrbaine
report exp(item csp listcoeffAccessibiliteFormeUrbaineEmplois * ln(acces)) * exp((1 - item csp listcoeffAccessibiliteFormeUrbaineEmplois) * ln(forme))
end






;;;;;;;;;;;;;;;;;;;;;;
; -- NOT USED --

;to chercheEmploi [temp-actif]
;; il s'agit pour l'actif consid�r� de trouver un emploi. pour l'instant, on fait
;; cela n'importe au hasard, sans consid�ration de distance
;ask temp-actif [
;  set emploiActif one-of emplois with [actifEmploi = 0]
;  
;  ask emploiActif [set actifEmploi myself]
;  ;set [actifEmploi] of emploiActif self
;]
;
;
;end

;to chercheActif [temp-emploi]
;
;
;end

;;;;;;;;;;;;;;;;;;;;;;;







