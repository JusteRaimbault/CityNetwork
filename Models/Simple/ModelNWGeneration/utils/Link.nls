;extensions [context]
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Link Utilities
;;;;;;;;;;;;;;;;;;;;;;;;;;




;;
; Given a link agentset, and both ends, reports links connecting both in the agentset
to-report find-link [linkset e1 e2]
  report linkset with [([end1] of self = e1 and [end2] of self = e2) or ([end1] of self = e2 and [end2] of self = e1)]
end




to-report my-singular-link-breed
  foreach context:link-breed-singular-names [
     if runresult (word "is-" ? "? self") [report ?]
  ]
  report "LINK"
end




to-report my-link-breed
  foreach context:link-breed-names [
     if runresult (word "is-" ? "? self") [report ?]
  ]
  report "LINKS"
end




;;Get the "print" of a link
;;ie the patches he intersects
;; @reports list of patches intersecting link
to-report footprint
  ;;difficult, because can intersect small pieces of patch
  ;;and therefore "jump" over one if makes regular jumps
  ;;why not make very small regarding patch-size
  ;;pb: will it not be to long to compute ?
  ;;ok, take compromise, function will not be "exact"
  let e2 end2 let res []
  ask end1 [
    let obj [patch-here] of e2
    hatch 1 [
      set heading towards e2
      let current-patch patch-here
      while [current-patch != obj and can-move? 0.05][
        ;;can't be blocked at one side of the world
        ;;because would be on finish !
        fd 0.05
        if patch-here != current-patch [set res lput current-patch res set current-patch patch-here]
      ]
      ; do not forget to add the last one !
      set res lput obj res
      die
    ]
  ]
  report res
end



;;
; strict intersection (excludes ends)
to-report strict-intersection-with-link [t1 t2]
  let inter intersection-with-link t1 t2
  if inter = [] [report inter]
  if (abs([xcor] of [end1] of t1 - first inter) < 0.00001 and abs([ycor] of [end1] of t1 - last inter)< 0.00001) or (abs([xcor] of [end2] of t1 - first inter)< 0.00001 and abs([ycor] of [end2] of t1 - last inter)< 0.00001) or (abs([xcor] of [end1] of t2 - first inter)< 0.00001 and abs([ycor] of [end1] of t2 - last inter)< 0.00001) or (abs([xcor] of [end2] of t2 - first inter)< 0.00001 and abs([ycor] of [end2] of t2 - last inter)< 0.00001)[
    report []
  ]
  report inter
end


;;;;;;;;
;; reports a two-item list of x and y coordinates, or an empty
;; list if no intersection is found
;; © Code copied from NL examples
to-report intersection-with-link [t1 t2]
  if [xcor] of [end1] of t1 = [xcor] of [end2] of t1 and [ycor] of [end1] of t1 = [ycor] of [end2] of t1 [report []]
  if [xcor] of [end1] of t2 = [xcor] of [end2] of t2 and [ycor] of [end1] of t2 = [ycor] of [end2] of t2 [report []]
  let m1 [tan (90 - link-heading)] of t1
  let m2 [tan (90 - link-heading)] of t2
  ;; treat parallel/collinear lines as non-intersecting
  if m1 = m2 [ report [] ]
  ;; is t1 vertical? if so, swap the two turtles
  if abs m1 = tan 90
  [
    ifelse abs m2 = tan 90
      [ report [] ]
      [ report intersection-with-link t2 t1 ]
  ]
  ;; is t2 vertical? if so, handle specially
  if abs m2 = tan 90 [
     ;; represent t1 line in slope-intercept form (y=mx+c)
      let c1 [link-ycor - link-xcor * m1] of t1
      ;; t2 is vertical so we know x already
      let x [link-xcor] of t2
      ;; solve for y
      let y m1 * x + c1
      ;; check if intersection point lies on both segments
      if not [x-within? x] of t1 [ report [] ]
      if not [y-within? y] of t2 [ report [] ]
      report list x y
  ]
  ;; now handle the normal case where neither turtle is vertical;
  ;; start by representing lines in slope-intercept form (y=mx+c)
  let c1 [link-ycor - link-xcor * m1] of t1
  let c2 [link-ycor - link-xcor * m2] of t2
  ;; now solve for x
  let x (c2 - c1) / (m1 - m2)
  ;; check if intersection point lies on both segments
  if not [x-within? x] of t1 [ report [] ]
  if not [x-within? x] of t2 [ report [] ]
  report list x (m1 * x + c1)
end

;;© NL Examples
to-report x-within? [x]  ;; turtle procedure
  report abs (link-xcor - x) <= abs (link-length / 2 * sin link-heading)
end

;;© NL Examples
to-report y-within? [y]  ;; turtle procedure
  report abs (link-ycor - y) <= abs (link-length / 2 * cos link-heading)
end

;;© NL Examples
to-report link-xcor
  report ([xcor] of end1 + [xcor] of end2) / 2
end

;;© NL Examples
to-report link-ycor
  report ([ycor] of end1 + [ycor] of end2) / 2
end