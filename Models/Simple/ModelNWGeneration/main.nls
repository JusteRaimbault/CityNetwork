
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to go
  ;;memorize pipes
  let old-pipes paths with [diameter > Df]
  
  update-pressures
  
  update-flows-and-diameters
  
  ;;reporter for convergence tests
  set new-links-number count paths with [diameter > Df and not member? self old-pipes]

  ;;display
  update-display

  tick
end


to update-pressures
  ;; reset vertices numbers
  ; TODO : necessary step ?
  reset-numbers
  ;; choose OD randomly
  choose-OD
  
  ;; solve the system
  let pressures solve-system current-implantation
  
  ask vertices[set-pressures pressures]
end


to update-flows-and-diameters
  set diameter-max max [diameter] of paths
  set total-diameter-variation 0
  ask paths[
    update-flow
    update-diameters
  ]
end


to go-for-one-time-step
  go
end


to reset-numbers
  let n1 count vertices
  if nodes-number = n1 [stop]
  set nodes-number n1
  let j 0
  foreach sort vertices[
    ask ? [
      set number j                        
      set j j + 1
    ]
  ]
end

to choose-OD
  ;ask center1 [color-patch]
  ;ask center2 [color-patch]
  
  ;;randomly choose origin and destination according to the densities
  let s sum [density] of patches
  let r random-float s let sacc 0 let found? false
  ask patches [if not found? [set sacc sacc + density if sacc >= r [set center1 self set found? true]]]
  set r random-float s set sacc 0 set found? false
  ask patches [if not found? [set sacc sacc + density if sacc >= r [set center2 self set found? true]]]
  
  ask center1 [set pcolor green set n-times n-times + 1]
  ask center2 [set pcolor green set n-times n-times + 1]
end



;;
;  solve the system
to-report solve-system [implantation]
  let flow-matrix get-flow-matrix
  let io-flows get-io-flows implantation
  report matrix:solve flow-matrix io-flows
end



;;
;
to-report get-flow-matrix
  set nodes-number count vertices
  let flow-matrix matrix:make-constant (nodes-number - 1) (nodes-number - 1) 0
  ask vertices[
    ;if number = nodes-number - 1 [stop]
    let total-flow 0
    ask my-paths[
      let s diameter / path-length
      set total-flow total-flow + s
      if [number] of other-end != nodes-number - 1 [
      matrix:set flow-matrix [number] of myself [number] of other-end (- s) ]
    ]
    matrix:set flow-matrix number number total-flow                      
  ]

  report flow-matrix
end



to-report get-io-flows [implantation]
  ;; n-1 x 1 matrix
  let Vm matrix:make-constant (nodes-number - 1) 1 0
  
  let aux [number] of one-of (vertices with-min [distance center1])
  ; input
  if aux != nodes-number - 1 [matrix:set Vm aux 0 I0]
  
  set aux [number] of one-of (vertices with-min [distance center2])
  ; output
  if aux != nodes-number - 1 [matrix:set Vm aux 0 (- I0)]
  
  ;;add constants flux coming from the implantation
  foreach implantation [
     ask ? [
        let num [number] of one-of (vertices with-min [distance myself])
        if num != nodes-number - 1 [matrix:set Vm num 0 ((matrix:get Vm num 0) + (incoming-fraction * I0))]
        let dest one-of patches with [density > 0]
        set num [number] of one-of (vertices with-min [distance dest])   ;;random destination
        if num != nodes-number - 1 [matrix:set Vm num 0 ((matrix:get Vm num 0) -(incoming-fraction * I0))]
     ] 
  ]
  
  report Vm
end


; vertices procedure
;;reset pression matrix
to set-pressures [pressures]
  set total-capacity sum [diameter / path-length] of my-paths
  ifelse number = nodes-number - 1 [
    set pressure 0
  ][
    set pressure matrix:get pressures number 0
  ]
end


;;
; Computes new flow
to update-flow
  set flow diameter / path-length * ([pressure] of end1 - [pressure] of end2)  
end

;paths procedure
to update-diameters
  ;; delta t -> should put in one single constant
  let dt 0.05
  let old-diameter diameter
  
  let flow-gamma 1.8 
  let var (abs flow) ^ flow-gamma / (1 + (abs flow) ^ flow-gamma)
  
  set diameter dt * var + (1 - dt) * diameter
  
  ;;diameter variation
  set total-diameter-variation total-diameter-variation + (diameter - old-diameter)
  
end




;to new-noeud
;  set size 0.5 set color green
;end

;to new-arete
;  set thickness 0.2 set color green
;end



