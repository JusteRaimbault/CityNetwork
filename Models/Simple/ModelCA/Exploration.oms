import java.text.SimpleDateFormat
import java.util.Date

// variables
val weightDensity = Val[Double]
val weightCenter = Val[Double]
val weightRoad = Val[Double]
val centerNumber = Val[Int]

// indicators
val networkSpeed = Val[Double]
val localDensity = Val[Double]
val globalDensity = Val[Double]
val moran = Val[Double]

// local vars correlations
//  local vars : density ; centre-distance ; road-distance - note : eucl-dist is constant !
val rhoDensCentre = Val[Array[Double]]
val rhoDensRoad = Val[Array[Double]]
val rhoCentrRoad = Val[Array[Double]]


val id = Val[Int]
val replication = Val[Int]

//  setup-headless [weight-density weight-center weight-road #-centres final-time random-sd]
// indicators : [ eval-speed , eval-density , spatial-autocorrelation-index , global-density]
val cmds = Seq("setup-headless ${weightDensity} ${weightCenter} ${weightRoad} ${centerNumber} 30 ${replication}","run-experiment")

val model =
NetLogo5Task(workDirectory / "HEADLESS_base.nlogo",cmds,embedWorkspace=true) set(
    inputs += (weightDensity,weightCenter,weightRoad,centerNumber,replication,id),
    outputs += (weightDensity,weightCenter,weightRoad,centerNumber,replication,id),
    netLogoOutputs += ("eval-speed", networkSpeed),
    netLogoOutputs += ("eval-density", localDensity),
    netLogoOutputs += ("global-density", globalDensity),
    netLogoOutputs += ("spatial-autocorrelation-index", moran),
    netLogoOutputs += ("lagged-corrs \"density\" \"centre-distance\" 8 5",rhoDensCentre),
    netLogoOutputs += ("lagged-corrs \"density\" \"road-distance\" 8 5",rhoDensRoad),
    netLogoOutputs += ("lagged-corrs \"centre-distance\" \"road-distance\" 8 5",rhoCentrRoad)
)

//weightDensity weightCenter weightRoad centerNumber
val exploration = ExplorationTask(
  ((((weightDensity in (0.0 to 1.0 by 0.5)) x
    (weightCenter in (0.0 to 1.0 by 0.5)) x
    (weightRoad in (0.0 to 1.0 by 0.5))
  ) filter ("weightDensity + weightCenter + weightRoad > 0")) withIndex id )
  /*(LHS(
    1,
    weightDensity in Range(0.0,1.0),
    weightCenter in Range(0.0,1.0),
    weightRoad in Range(0.0,1.0)
  ) withIndex id)*/
  x (centerNumber is 1) x (replication in UniformDistribution[Int]() take 50)
)

//val purpose = "test"
val purpose = "gridexplo"

val eval = exploration -< model

val indics_hook = AppendToCSVFileHook(workDirectory / "res" / "exploration" / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv") set (
  arraysOnSingleRow := true
)

val local = LocalEnvironment(50)
//val grid = DIRACEnvironment("vo.complex-systems.eu")

//exploration -< (model on grid by 300 hook indics_hook)
exploration -< (model on local hook indics_hook)
