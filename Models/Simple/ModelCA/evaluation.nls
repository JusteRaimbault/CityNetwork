;;;;;;;;;;;;;;;;
;; Evaluation functions
;;;;;;;;;;;;;;;;



to export-data
  let current-time ticks
  if export-data? [
    
    let current-data []
    foreach data-export-patches [
      ask ? [
      ;set current-data lput (list "density" pdensity pxcor pycor ticks) current-data
      ;set current-data lput (list "cdistance" pdistance-to-centre pxcor pycor ticks) current-data
      ;set current-data lput (list "rdistance" pdistance-to-roads pxcor pycor ticks) current-data
      ;set current-data lput (list "ceucldistance" distance one-of centres with-min [distance myself] pxcor pycor ticks) current-data
      set current-data lput (list pxcor pycor current-time pdensity pdistance-to-centre pdistance-to-roads (distance one-of centres with-min [distance myself])) current-data
      ]
    ]
    set data-to-export concatenate (list current-data data-to-export)
  ]
  
  if values-table? [
     ; table : time, indic, patchx, patchy -> value
     foreach data-export-patches [
       ask ? [
         table:put values-table (list current-time "density" pxcor pycor) pdensity
         table:put values-table (list current-time "centre-distance" pxcor pycor) pdistance-to-centre
         table:put values-table (list current-time "road-distance" pxcor pycor) pdistance-to-roads
         table:put values-table (list current-time "centre-eucl-distance" pxcor pycor) (distance one-of centres with-min [distance myself])
       ]
     ]
  ]
  
  if export-movie? [movie-grab-view]
end


to export-data-to-file
  let fileprefix (word "/Users/Juste/Documents/ComplexSystems/CityNetwork/Models/Statistics/Synthetic/rdb/" (replace (replace date-and-time " " "_") ":" "_"))
  lists-csv-export data-to-export (list "x" "y" "t" "density" "cdistance" "rdistance" "ceucldistance") ";" (word fileprefix ".csv")
  ; export param values
  let params []
  set params lput (list "distance-to-activities-coefficient" distance-to-activities-coefficient) params
  set params lput (list "density-coefficient" density-coefficient) params
  set params lput (list "distance-to-roads-coefficient" distance-to-roads-coefficient) params
  set params lput (list "distance-to-center-coefficient" distance-to-center-coefficient) params 
  set params lput (list "distance-road-needed" distance-road-needed) params 
  set params lput (list "built-cells-per-tick" built-cells-per-tick) params 
  set params lput (list "activities-norma" activities-norma) params 
  set params lput (list "centers-number" centers-number) params
  set params lput (list "activities-number" activities-number) params
  set params lput (list "final-ticks" ticks) params 
  lists-csv-export params (list "param" "value") ";" (word fileprefix "_params.csv")
end

  
  


;;output value of reporters.
;;not done in monitors to avoid calculation at each step.
to calculate-reporters
  let line ""
  foreach output-reporter-names [
    let val (runresult ?)
    output-print word word ? " = " val
    set line word line val if ? != last output-reporter-names [set line word line ";"]
  ]
  if output-file? [print-in-file output-file-name line]
end



;;
; lagged correlation, between two vars, already
;  assumed var stored
to-report lagged-correlation [var1 var2 tau t0]
  let current-time ticks
  let x [] let y [] let firstvar var1 let secvar var2
  if tau > 0 [set firstvar var2 set secvar var1]
  let t (tau + 1 + t0)
  repeat (current-time - tau - 1 - t0) [
    foreach data-export-patches [ask ? [
       set x lput ((table:get values-table (list t firstvar [pxcor] of ? [pycor] of ?)) - (table:get values-table (list (t - 1) firstvar [pxcor] of ? [pycor] of ?))) x
       set y lput ((table:get values-table (list (t - tau) secvar [pxcor] of ? [pycor] of ?)) - (table:get values-table (list (t - tau - 1) secvar [pxcor] of ? [pycor] of ?))) y
    ]]
    set t t + 1
  ]
  let mx mean x set x map [? - mx] x let my mean y set y map [? - my] y
  report mean (list-times-element-wise x y) / (standard-deviation x * standard-deviation y)
end


;;
; set of lagged corrs for a given pair of vars
to-report lagged-corrs [var1 var2 abstaumax t0]
  ; get var values
  let res []
  let tau (- abstaumax)
  repeat abstaumax + 1 [
    set res lput (lagged-correlation var2 var1 (abs tau) t0) res
    set tau tau + 1
  ]
  repeat abstaumax [
    set res lput (lagged-correlation var1 var2 tau t0) res
    set tau tau + 1
  ]
  report res
end



;;speed in network
to-report eval-speed
  report ((sum [pspeed-from-patch ^ p-speed] of patches with [constructed?]) /(count patches with [constructed?])) ^ (1 / p-speed )
end


;;intergated local density
to-report eval-density
  ;local density with certain norm on all cells
  let res 0
  carefully[
    set res ((sum [pdensity ^ p-density] of patches with [constructed?]) /(count patches with [constructed?])) ^ (1 / p-density )
  ][output-print error-message]
  report res
end

to-report eval-activities
  ;;beware, need to report a relative accessibility -> normalise by max !
  let m max [pdistance-to-activities ] of patches with [constructed?]
  report ((sum [(pdistance-to-activities / m) ^ p-activities] of patches with [constructed?]) /(count patches with [constructed?])) ^ (1 / p-activities )
end

to-report global-eval [varname]
  ;;generic function for integration of a local field through p-norm
  report norm-p (runresult (word "p-" varname)) (runresult (word word "[p" varname "] of patches with [constructed?]"))
end


;;global density
;;calculated on square enveloppe
to-report global-density
  let xmin min [pxcor] of patches with [constructed?]
  let xmax max [pxcor] of patches with [constructed?]
  let ymin min [pycor] of patches with [constructed?]
  let ymax max [pycor] of patches with [constructed?]
  let ntot count patches with [pxcor >= xmin and pxcor <= xmax and pycor >= ymin and pycor <= ymax]
  let nc count patches with [pxcor >= xmin and pxcor <= xmax and pycor >= ymin and pycor <= ymax and constructed?]
  report nc / ntot
end


to-report global-constructible-density
  report count patches with [constructed?] / count patches with [constructible?]
end



;;;;;;;;;;;;;;;;
;;Moran index for population
;;;;;;;;;;;;;;;
;; Note: recuperation of old code
to-report spatial-autocorrelation-index
  ;;dirty but try to be efficient : sort agents lexically on coordinates
  ;;would be more efficient with single pass on patches for all species, but function would be totally unreadable
  clear-table-moran
  let ag sort-by [lexcomp ?1 ?2 (list task [floor (xcor / moran-grid-size)] task [floor (ycor / moran-grid-size)])] houses
  let min-ag first ag
  let pop-count length ag
  ;;let cut the space in subregions, 50*50 should be enough precise
  ;;count are held in a table: for square x=i*step,y=j*step : (i,j) -> agents_count
  ;;table initialised with plots
  let i 0 let j 0 let xmax moran-grid-size let ymax moran-grid-size let ended? false
  repeat floor (world-width / moran-grid-size) [
     repeat floor (world-height / moran-grid-size) [
       while [not ended? and [xcor] of first ag < xmax and [ycor] of first ag < ymax] [
         table:put moran-populations (list i j) (table:get moran-populations (list i j) + 1)
         set ag but-first ag
         if length ag = 0 [set ended? true]        
       ]
       set ymax ymax + moran-grid-size
       set j j + 1
     ]
     set xmax xmax + moran-grid-size set ymax moran-grid-size
     set i i + 1 set j 0
  ]
  
  let N length table:keys moran-populations
  let d-mean pop-count / N
  let W 0 let S 0 let norm-factor 0
  foreach table:keys moran-populations [
    let site-i ? foreach table:keys moran-populations [
      let site-j ?
      if site-j != site-i [
        let weight  1 / (sqrt ((first site-i - first site-j) ^ 2 + (last site-i - last site-j) ^ 2 ))
        set W W + weight
        set S S + weight * (table:get moran-populations site-i - d-mean) * (table:get moran-populations site-j - d-mean)
      ]
    ]
    set norm-factor norm-factor + ((table:get moran-populations site-i - d-mean) ^ 2 )
  ]
  report N * S / (W * norm-factor)
end

to clear-table-moran
  
  ;;we set the size of the grid here, since we would like to make some tests regarding size of the grid
  set moran-grid-size floor (world-width / moran-grid-factor) ;;good compromise regarding complexity ?
  
  ;;don't forget to clear the table?
  ;;-> useful if come from greater num of cells, but not dangerous
  ;;do it anyway for coding spirit
  set moran-populations table:make
  
  let i 0 let j 0
  repeat floor (world-width / moran-grid-size) [
     repeat floor (world-height / moran-grid-size) [
       table:put moran-populations (list i j) 0 set j j + 1
     ] set j 0 set i i + 1
  ]
  
end



;;;;;;;;;;;
;; economic eval
;;;;;;;;;;;

;;launches economic ABM and reports segregation index
;;would need several repetitions to be more exact !
to-report eval-economic
  output-print "Launching economic ABM for segregation index calculation"
  output-print word n-repets-eco " repetitions"
  let res 0
  repeat n-repets-eco [
    setup-ABM
    repeat max-ticks-economic [go-one-step-ABM]
  ]
  report economic-segregation
end


;;;;;;;;;;;
;; Spatialised diversity of activities in centers
;;;;;;;;;;;

to-report activity-diversity
  let s 0 let w 0
  ask centres [
    ask other centres [
      set w w + (1 / distance myself)
      if [activity] of self != [activity] of myself [set s s + (1 / distance myself)]
    ] 
  ]
  ;;don't normalize by 2 since couples are double counted
  report s / w
end


















