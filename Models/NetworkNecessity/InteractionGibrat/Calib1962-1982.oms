import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")

//import Model._


import interaction._

// Parameters
val growthRate = Val[Double]
val gravityWeight = Val[Double]
val gravityGamma = Val[Double]
val gravityDecay = Val[Double]
val gravityAlpha = Val[Double]
val feedbackWeight = Val[Double]
val feedbackGamma = Val[Double]
val feedbackDecay = Val[Double]

// Exploration
val id=Val[Int]

// Reporters
val logmse=Val[Double]
val mselog=Val[Double]

// config files
val popFile=Val[File]
val distFile=Val[File]
val fdistsFile=Val[File]
val dateFile=Val[File]

// Model
val model =
  ScalaTask(
    """
      | import interaction._
      | val pop = ModelLauncher.main(input.popFile,input.distFile,input.fdistsFile,input.dateFile,input.growthRate,input.gravityWeight,input.gravityGamma,input.gravityDecay,input.gravityAlpha,input.feedbackWeight,input.feedbackGamma,input.feedbackDecay,input.id)
      | val logmse = InteractionModel.logmse(pop)
      | val mselog = InteractionModel.mselog(pop)
    """.stripMargin
  ) set (
    plugins += pluginsOf(ModelLauncher),
    //inputFiles += ((popFile, "popFileName"),(distFile,"distFileName"),(fdistsFile,"fdistsFileName")),
    inputs += (popFile,distFile,fdistsFile,dateFile,growthRate,gravityWeight,gravityGamma,gravityDecay,gravityAlpha,feedbackWeight,feedbackGamma,feedbackDecay,id),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,gravityAlpha,feedbackWeight,feedbackGamma,feedbackDecay,id),
    outputs += (logmse,mselog)
  )
val modelCapsule = Capsule(model)











val local = LocalEnvironment(25)
//val grid = EGIEnvironment("vo.complex-systems.eu")

/*
val rates = Map("1831-1851"->0.12,"1841-1861"->0.17,"1851-1872"->0.13,"1881-1901"->0.075,
     "1891-1911"->0.08,"1921-1936"->0.08,"1946-1968"->0.13,"1962-1982"->0.1,"1975-1990"->0.05)
*/
val period = "1962-1982"


//val datestr = (new SimpleDateFormat("yyyyMMdd_HHmm")).format(new Date())
//val purpose = "periods_fullmodel_grid"
//val purpose = "calibperiod_nsga"
//val resdir = datestr+"_"+purpose
val resdir = "20170725_calibperiod_full_nsga"


//def calib(period: String) = {

  //val filename = s"pop50_${period}.csv"
  //val datefilenames = s"dates_${period}.csv"
  val filename = "pop50_"+period+".csv"
  val datefilenames = "dates_"+period+".csv"


  val fileSetting = ExplorationTask(
    (popFile is workDirectory / "data" / "pops" / filename ) x //"pops" / filename) x
    (distFile is workDirectory / "data"/ "dist50.csv") x
    (fdistsFile is workDirectory / "data" / "distMat_Ncities50_alpha03_n03.csv") x
    (dateFile is workDirectory / "data" / "dates" / datefilenames) x
    (id in Seq(1)) x (gravityAlpha in Seq(0.0))
    //x (feedbackWeight is 0.0)
    //x (feedbackGamma is 1.0)
    //x (feedbackDecay is 1.0)
    //x (growthRate in Seq(rates(period)))
    //x (gravityWeight is 0.001)
  ) set(
    inputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay)
  )

/*
  val varSetting = ScalaTask("val gravityWeight = growthRate / 20") set (
    inputs += (growthRate,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay),
    outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay)
  )
*/

  val eval = fileSetting -< model

  val evolution =
    SteadyStateEvolution(
      algorithm =
        NSGA2(
          mu = 200,
          genome =
            Seq(
              growthRate in Range(0.0, 0.1),
              gravityWeight in Range(0.00005,0.01),
              gravityGamma in Range(1.0,10.0),
              gravityDecay in Range(0.0,1000.0),
              feedbackWeight in Range(0.00005,10.0),
              feedbackGamma in Range(0.0,100.0),
              feedbackDecay in Range(0.0,1000.0)
            ),
          objectives = Seq(logmse,mselog)
        ),
      evaluation = eval,
      termination = 1000
    )

  val island = IslandEvolution(evolution, parallelism = 25,termination=100)

  val savePopulation = SavePopulationHook(island, workDirectory / "calibration" / resdir / period)

  (island on local hook savePopulation)
  //(island on grid hook savePopulation)

//}


//valperiods = Seq("1831-1851"/*,"1841-1861","1851-1872"*/,"1881-1901"/*,"1891-1911","1921-1936","1946-1968","1962-1982","1975-1999"*/)
//valperiods = Seq("1831-1851")
//valperiods = Seq("full")

/*
val firstCapsule = Capsule(EmptyTask())
val calibrations = periods.map(calib)
calibrations.map(firstCapsule -- _).reduce(_ & _)
*/
