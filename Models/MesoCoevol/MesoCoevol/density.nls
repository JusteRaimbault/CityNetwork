
;;;;;;;;;;;;;;;;
;; population density growth



;;
;
to setup-exploration
  ; set time steps
  setup-synth-pattern
  ; here fix max pop
  set total-time-steps floor (sp-max-pop / population-growth-rate)
end






;;
; update density
to density:update-density
  
  output-print (word "Tick " ticks " : updating density...")
 
  ;; add new inhabitants with proba proportionnal to density
  ; Function of the density ?
  ;  ex : power function will favorise greater aggregations ?
  ;
  ; --> discrete choice model with beta param
  ;
  
  let stot sum [patch-value ^ density-alpha-localization] of patches
  
  ifelse stot = 0 [
    repeat (floor population-growth-rate) [ask one-of patches [set patch-population patch-population + 1]]
    ][
    repeat floor population-growth-rate [
      let s 0 let r random-float 1 let i 0 let plist to-list patches
      while [s < r] [ask item i plist [ set s s + ((patch-value ^ density-alpha-localization) / stot) if s >= r [set patch-population patch-population + 1] set i i + 1]]     
    ]

    
  ]
  
  ;; diffuse
  ;; TODO :: add heterogeneous diffusion. just random local perturbation ?
  ;; also different diffusion if effective local density is too high ? would be logical to have "realistic" distribs
  ;;   -> set proba different from population ? (ex depending on neighbors if too high ? -> diffuse other variable ?)
  
  repeat density-diffusion-steps [
    diffuse patch-population density-diffusion
    
    ; adjustement for bord effects
    ;  -> bord patches loose (missing-#-of-neighs * alpha ) % of population, that should have propagated outside the world
    ask patches with [count neighbors < 8] [set patch-population (patch-population * (1 - density-diffusion * (8 - count neighbors) / 8))]
    
  ]
  
  
  
  ; update population share
  set total-population sum [patch-population] of patches
  ask patches [set patch-population-share patch-population / total-population]
  
  
  ; stop if needed or if max time reached
  ;if total-population >= sp-max-pop [stop]
  
  ;set comp-time comp-time + timer
end



;;
; Generation of a synthetic pattern
to density:generate-synth-pattern
  setup-synth-pattern
  repeat total-time-steps [density:update-density]
end


;;
; setup density from a real raster file.
; need indic setup first
;to setup-real-pattern
;  ; do the extraction and store in temp raster pop
;  ;show  (word "extractSubRaster(\"" real-pattern-file "\"," real-row "," real-col "," real-size "," real-factor ")")
;  
;  let config rserve:get (word "extractSubRaster(\"" real-pattern-file "\"," real-row "," real-col "," real-size "," real-factor ")")
;
;  clear-drawing
;  ;gis:apply-raster gis:load-dataset "temp_raster_pop.asc" sp-occupants
;  ;gis:paint gis:load-dataset real-pattern-file 0
;  
;  ; replace Nan -> strange test with <= or =>
;  ;ask patches with [not ( sp-density >= 0 or sp-density <= 0) ] [set sp-density 0]
;  
;  let i 0 let j 0
;  foreach config [
;    set j 0
;    foreach ? [
;     ask patch i j [set sp-occupants ?]
;     set j j + 1
;    ]
;    set i i + 1
;  ]
;  
;  
;  color-synth-pattern
;  
;  plots
;end

