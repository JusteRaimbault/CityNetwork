
;;
;  network evolution


to network:update-network
  
  ; update only at some time steps
  if network:network-update-condition [
    
    output-print (word "Tick " ticks " : updating network...")
    
    ; new centers to be connected
    cities:add-cities
    ; nw growth heuristic depends on pop growth, need to update city pop
    cities:update-patches-closest-cities
    cities:update-cities-population
    
    ; add links in themselves
    network:grow-network
    
    cities:update-patches-closest-cities
    cities:update-cities-population
    
    ; update measures and variables
    network:update-network-measures
  
  ]
  
end



;;
; update condition can be at fixed ticks, or more endogenous
;   (depending on population for example : if coupling with a larger scale, becomes endog.)
to-report network:network-update-condition
  
  ; called during setup by patch procedures : true if ticks are not set
  
  let res true
  
  if network-update-time-mode = "fixed-ticks" [carefully [set res ticks > 0 and ticks mod network-update-ticks = 0][set res true]]
  
  report res
end



;;
;  update measures
to network:update-network-measures
  ; core measures
  network:cache-nw-measures
  
  ; update cities vars
  network:update-cities-nw-vars
  
end



;;
;  Network growth
;   -> multi-modeling at this stage
;
to network:grow-network
  
  simple-connexification
  
  network:update-network-measures
  
  ; rbd style nw growth
  if network-generation-method = "road-connexion" [
    ; with the connexion of new cities, nothing to do here, already mimics the rbd behavior
    ; Q : deactivate this mechanism ? not necessarily relevant, as network must be connex
  ]
  
  ; gravity
  if network-generation-method = "gravity-heuristic" [
    network-heuristic:grow-network
  ]
  
  ; biological
  if network-generation-method = "biological" [
    network-biological:grow-network
  ]
  
  simple-connexification
  
end








;; 
;  network indicators
to network:cache-nw-measures
  
  ; caching shortest paths and measures
  nw:set-context cities roads
  ask roads [set road-length link-length set bw-centrality 0]
  ask cities [set city-bw-centrality 0]
  set shortest-paths table:make set nw-relative-speeds table:make set nw-distances table:make set pairs-total-weight 0
  let clist to-list cities let i 0 let j 1
  repeat (length clist - 1) [
    let c1 item i clist
    set j i + 1
    repeat (length clist - i - 1) [
      ; compute shortest path
      let c2 item j clist let path [] let tpath [] ask c1 [set path nw:weighted-path-to c2 "road-length" set tpath nw:turtles-on-weighted-path-to c2 "road-length"]
      ; update link betweeness
      let l 0 foreach path [ask ? [set l l + road-length set bw-centrality bw-centrality + 1]]
      ; update node betweeness
      foreach tpath [ask ? [set city-bw-centrality city-bw-centrality + 1]]
      ; update shortest path table
      table:put shortest-paths (list [who] of c1 [who] of c2) path table:put shortest-paths (list [who] of c2 [who] of c1) (rev path)
      ; update nw distance table
      table:put nw-distances (list [who] of c1 [who] of c2) l table:put nw-distances (list [who] of c2 [who] of c1) l
      ; update relative speed table
      let deucl 0 ask c1 [set deucl distance c2]
      table:put nw-relative-speeds (list [who] of c1 [who] of c2) (deucl / l)
      
      set pairs-total-weight pairs-total-weight + [patch-population] of c1 + [patch-population] of c2
      set j j + 1
    ]
    set i i + 1
  ]
  
end


;;
; update cities vars from cache
to network:update-cities-nw-vars
  let n count cities
  let diag sqrt (world-width ^ 2 + world-height ^ 2)
  ask cities [
    set city-bw-centrality city-bw-centrality * 2 / (n * (n - 1)) 
    let otherids ([who] of other cities)
    let distances map [table:get nw-distances (list who ?)] otherids
    set city-accessibilities list-times-element-wise (map [[city-population] of city ?] otherids) (map [exp ( - ? / accessibility-decay)] distances)
    set city-accessibility mean city-accessibilities
    set city-closeness-centrality mean (map [diag / ?] distances)
    
  ]
  
end




;;
; compute only nw distances
to network:compute-nw-distances
  nw:set-context cities roads
  ask roads [set road-length link-length]
  set nw-distances table:make
  let clist to-list cities let i 0 let j 1
  repeat (length clist - 1) [
    let c1 item i clist
    set j i + 1
    repeat (length clist - i - 1) [
      let c2 item j clist let d 0 ask c1 [set d nw:weighted-distance-to c2 "road-length"]
      table:put nw-distances (list [who] of c1 [who] of c2) d table:put nw-distances (list [who] of c2 [who] of c1) d set j j + 1
    ]
    set i i + 1
  ]
end








to network:import-nw-from-file [prefix]
  let cities-coords read-numeric-csv-as-row-list (word prefix "_cities.csv") ";"
  
  foreach cities-coords [create-cities 1 [setxy item 0 ? item 1 ? set id item 2 ?]]
  
  let roads-ids read-numeric-csv-as-row-list (word prefix "_roads.csv") ";"
  
  foreach roads-ids [ask one-of cities with [id = first ?] [let c2 one-of cities with [id = last ?] if not road-neighbor? c2 [create-road-with c2]]]
  
  display:display-network
end





to network:new-road
  set road-length link-length
  set capacity 0.3
  set thickness capacity
  set color green
end



