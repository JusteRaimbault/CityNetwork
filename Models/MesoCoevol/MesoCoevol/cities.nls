

;;;;
;; cities <=> centers <=> network nodes






;;
;  add some cities given density, before network update
to cities:add-cities
  
  ; |P(new center) = f(population,local density of other centers,distance to roads)
  ;  independence hypothesis : |P = pop-share * (dmax - density)/ dmax * exp( - (d - dr)^2 / sigma_r)

  let added-cities-num 0

  ask patches [
     if added-cities-num < network-max-new-cities-number [
       if random-float 1 < cities:patch-proba-new-city [
         if count cities-here = 0 [
           sprout-cities 1 [ new-city ]
           set added-cities-num added-cities-num + 1
         ]
       ]
     ]
  ]

end

;;
;
to-report cities:patch-proba-new-city
  let cities-density count (cities in-radius network-cities-density-radius)
  if patch-distance-to-road > exp ( - network-distance-road-min / distance-to-roads-decay) [report 0]
  report patch-population-share / patch-population-share-max * (network-cities-max-density - cities-density) / network-cities-max-density * exp ( - ((patch-distance-to-road - network-distance-road-needed)/ 10)^ 2)
end


;;
; link patch <-> cities
to cities:update-patches-closest-cities
  ask patches [
    set patch-closest-city one-of (cities with-min [distance myself])
    set patch-closest-city-distance distance patch-closest-city
  ]
end


;;
;  update accessibilities
to cities:update-accessibility
  ask cities [
    let otherids ([who] of other cities)
    let distances map [table:get nw-distances (list who ?)] otherids
    set city-accessibilities list-times-element-wise (map [[city-population] of city ?] otherids) (map [exp ( - ? / accessibility-decay)] distances)
    set city-accessibility mean city-accessibilities
  ]
end


;;
;  update city population
to cities:update-cities-population
  ask cities [set city-population sum [patch-population] of patches with [patch-closest-city = myself]]
  set cities-total-population sum [city-population] of cities
end








;;
;  Fill the potential table
;    @parameter mode : real or nw distance taken into account
to cities:fill-cities-interaction-table [mode]
  
  ;debug (word "... cities int table " mode)
  
  let city-list to-list cities
  let i 0 let m 0 let m-key []
  foreach but-last city-list [
    let c1 ?
    let j i + 1 while [j < length city-list][
      let c2 item j city-list let key (list [who] of c1 [who] of c2 mode) let revkey (list [who] of c2 [who] of c1 mode)
      let p12 cities:cities-interaction-force c1 c2 mode ; interaction force
      table:put cities-interaction-table key p12
      table:put cities-interaction-table revkey p12
      set j j + 1 
    ]
    set i i + 1
  ]
  
end


;;
;  Interaction between two cities
to-report cities:cities-interaction-force [city1 city2 mode]
  ;show (word cities-interaction-method " city1 city2 " mode)
  ;report runresult (word cities-interaction-method " city1 city2 mode")
  report gravity city1 city2 mode
end







;;
;  for weak coupling : generate cities from scratch (including density) -- pb of modules hierarchy here : adapted archis -> foireux multimodelling...
to cities:generate-cities-from-scratch [generation-method]
  
  
  
  if generation-method = "random" [
    
    set-population-distribution
    
     foreach populations [
       create-cities 1 [set city-population ? setxy random-xcor random-ycor new-city] 
     ]
  ]
  
  
  if generation-method = "zipf-christaller" [
    
    set-population-distribution
    
     foreach populations [
       let current-city nobody
       create-cities 1 [
         set city-population ? set current-city self new-city
       ]
       update-patches-weighted-pop
       let p next-christaller-patch
       ask current-city [move-to p setxy (xcor - 0.5 + random-float 1) (ycor - 0.5 + random-float 1)]
     ]
  ]
  
  
  if generation-method = "prefAtt-diffusion-density" [
     ; external call to the density generator
     setup-synth-pattern
     ;set sp-max-pop sum populations
     ;set sp-max-pop sp-population
     set total-time-steps floor (sp-max-pop / population-growth-rate)
     
     density:generate-synth-pattern
     
     ; then places 'abstract' nodes as cities depending on density distrib
     
     density-to-cities
     
  ]
  
  
  if generation-method = "from-density-file" [
    ; read a configuration from a file
    ; -> resize world in function
    
    if is-number? fixed-config-num [
      set density-file density-file-from-dir "setup" fixed-config-num;"../../../Results/Synthetic/Density/20151106_Grid/pop"
    ]
    if is-string? fixed-config-num [set density-file fixed-config-num]
    set density-file fixed-config-num
    show density-file
    ;set density-file "../../../Results/Synthetic/Density/20151106_Grid/pop/config_166.csv"
    density-from-file density-file
    
    display:display-patches
    
    density-to-cities
  ]
  
  if generation-method = "fixed-density" [
     reset-network-and-cities
     density-to-cities
  ]
  
  
  set max-pop max [city-population] of cities
  set total-population sum [city-population] of cities
  
end


;;
; Updates patch variables which are distance-weighted sum of population
;  (to be used for christaller patch selection)
to update-patches-weighted-pop
  ask patches [
    set distance-weighted-total-pop sum [distance myself / city-population] of cities
  ]
end

;;
;  Get randomly the next christaller patch
;  drawn according to proba prop to distance-weighted sum of pop
;   Q : filter on bord patches for example ?
to-report next-christaller-patch
  let tot sum [distance-weighted-total-pop] of patches let s 0 let r random-float 1 let found? false let res one-of patches
  ask patches [set s s + distance-weighted-total-pop / tot if s > r and not found? [set res self set found? true]]
  report res
end


;;
; get list of cities population
;  for now rank-size law
;  P_i : P_max / i^alpha
to set-population-distribution
  set populations []
  let i 1
  repeat #-cities [
    set populations lput (city-max-pop / (i ^ rank-size-exponent)) populations
    set i i + 1 
  ]
end




to density-from-file [file]
   let rows read-numeric-csv-as-row-list file ";"
   ; file assumed consistent -> resize world here
   let width length item 0 rows let height length rows
   resize-world 0 (width - 1) 0 (height - 1) set-patch-size (50 * 13 / height)
   let i min-pxcor let j min-pycor
   foreach rows [
      set j min-pycor
      foreach ? [
        ask (patch i j) [set patch-population ?]
        set j j + 1
      ]
      set i i + 1
   ]
   
   ;color-synth-pattern
end


to-report density-file-from-dir [dir index]
  ifelse is-number? index [
    ; random density file 
    report (word dir "/" item (index - 1) pathdir:list dir)
  ][
    ; assumed index as filepath otherwise
    report index
  ]
end


;;
; Transforms a spatialized density grid into an abstract (but also spatialized) city system
;
;  NOTE : must be a bijection density <-> cities, which form is fixed by given mechanisms
;      -- !! has a strong influence on nw generation as nw generation algorithms depend on city system organization.
to density-to-cities
  
  if density-to-cities-method = "random-aggreg" [
     
  ]
  
  if density-to-cities-method = "hierarchical-aggreg" [
     ; hierarchical aggreg == hierachical clustering on small initial entities located on each patch
     ;  stops when number of cities == #-cities
     ask patches [
       sprout-cities 1 [
          set city-population patch-population
          new-city
       ]
     ]
     
     ;init-cities-interaction-table
     
     ;cluster-cities
      
     randomly-cluster-cities
  ]
  
  if density-to-cities-method = "intersection-density" [
    ; use alpha localization parameter for proba distribution
    repeat #-cities [
       let ptot sum [patch-population] of patches
       let stot sum [(patch-population / ptot) ^ density-alpha-localization] of patches let r random-float 1 let s 0 let plist to-list patches let i 0 let p nobody
       while [s < r] [set p item i plist set s s + (([(patch-population / ptot) ^ density-alpha-localization] of p) / stot) set i i + 1]
       ask p [
         sprout-cities 1 [
           ;set population 1
           ;set population mean [sp-occupants] of (patches in-radius gravity-radius)
           ;ask patches in-radius gravity-radius [set sp-occupants 0 set sp-density 0]
           setxy (xcor - 0.5 + random-float 1) (ycor - 0.5 + random-float 1) new-city]
       ]
    ]
    
    ; attribute population to cities
    ask patches [
      ask one-of cities with-min [distance myself] [set city-population city-population + [patch-population] of myself] 
    ]
    
    set city-max-pop max [city-population] of cities
    
    ask cities [set size max (list (3 * city-population / city-max-pop) 0.3)]
    
  ]
  
  
  
end



;;
; Setup for a synthetic pattern generation.
;
to setup-synth-pattern
  ; empty setup
  ask patches [set patch-population-share 0 set patch-population 0]
  reset-ticks
  display:display-patches
  
  ;set comp-time 0
end



;;
; random heuristic to cluster cities
to randomly-cluster-cities
  reset-ticks
  while [count cities > #-cities] [
    ; draw a city at random given its population
    let c1 random-city cities let c2 random-city ([other cities in-radius gravity-radius] of c1)
    if c2 != nobody [
      let p1 [city-population] of c1 let p2 [city-population] of c2 let t p1 / (p1 + p2)
      let nc nobody create-cities 1 [set nc self set city-population (p1 + p2) setxy (([xcor] of c1)* t + (1 - t) * ([xcor] of c2)) (([ycor] of c1)* t + (1 - t) * ([ycor] of c2) ) new-city]
      ;output-print (word c1 c2)
      ask c1 [die] ask c2 [die]
    ]
    tick
  ]
end

to-report random-city [cityset]
  ifelse any? cityset [
    let stot sum [city-population] of cityset
    let r random-float 1
    let s 0 let l to-list cityset let res first l let i 0
    while [s < r] [
      set res item i l
      set s s + ([city-population] of res) / stot
    ]
    report res
  ][
    report nobody
  ]
end

;;
; iterative deterministic clustering of cities.
;  too slow, in O(n2) -> use a random heuristic
to cluster-cities
  table:remove cities-interaction-table "max-value" table:remove cities-interaction-table "max-key"
  ; cluster cities
     while [count cities > #-cities] [
       ; find max of interaction force
       let m 0 let m-key []
       foreach table:keys cities-interaction-table [let v table:get cities-interaction-table ? if v > m [set m v set m-key ?]]
       
       let k1 first m-key let k2 last m-key let c1 city k1 let c2 city k2
       let p1 [city-population] of c1 let p2 [city-population] of c2
       let t p1 / (p1 + p2)
       ; create the new city
       let nc nobody create-cities 1 [set nc self set city-population (p1 + p2) setxy (([xcor] of c1)* t + (1 - t) * ([xcor] of c2)) (([ycor] of c1)* t + (1 - t) * ([ycor] of c2) ) new-city]
       ask city k1 [die] ask city k2 [die]
       ; update pop table
       cities:update-cities-interaction-table k1 k2 nc
     ]
end



;to init-cities-interaction-table
;  set cities-interaction-table table:make
;  let city-list to-list cities
;  let i 0 let m 0 let m-key []
;  foreach but-last city-list [
;    output-print (word "interaction-table : " i)
;    let c1 ?
;    ask c1 [
;      let k1 who
;      ask (other cities in-radius 20) [ ; approximation radius computed as : r~ 1/sqrt(espilon) * Pmax / Pmin * rmin
;        let c2 self
;        let k2 who let key (list k1 k2) let revkey (list k2 k1)
;        if not (table:has-key? cities-interaction-table key or table:has-key? cities-interaction-table revkey) [
;          let p12 cities-interaction-force c1 c2
;          if p12 > m [set m p12 set m-key key]
;          table:put cities-interaction-table key p12
;        ]
;      ]
;    ]
;    
;;    let j i + 1 while [j < length city-list][
;;      let c2 item j city-list let key (list [who] of c1 [who] of c2) ;let revkey (list [who] of c2 [who] of c1)
;;      let p12 cities-interaction-force c1 c2 ; interaction force
;;      if p12 > m [set m p12 set m-key key]
;;      table:put cities-interaction-table key p12
;;      ;table:put cities-interaction-table revkey p12 ; Q is revkey needed ? NO as couple matters
;;      set j j + 1 
;;    ]
;    set i i + 1
;  ]
;  
;  ; add special entries
;  ;table:put cities-interaction-table "max-value" m
;  ;table:put cities-interaction-table "max-key" m-key
;  
;  ;show table:keys cities-interaction-table
;end


;;
; c1,c2 : ids of deletd cities
; newcity : newcity
to cities:update-cities-interaction-table [n1 n2 newcity]
  let to-remove [] foreach table:keys cities-interaction-table [if member? n1 ? or member? n2 ? [set to-remove lput ? to-remove]]
  foreach to-remove [table:remove cities-interaction-table ?]
  
  ask newcity [
    let c1 self let k1 who let m 0 let m-key []
    ask (other cities in-radius 20) [ ; approximation radius computed as : r~ 1/sqrt(espilon) * Pmax / Pmin * rmin
      let c2 self
      let k2 who let key (list k1 k2) let revkey (list k2 k1)
      if not (table:has-key? cities-interaction-table key or table:has-key? cities-interaction-table revkey) [
        let p12 cities:cities-interaction-force c1 c2 "euclidian"
        if p12 > m [set m p12 set m-key key]
        table:put cities-interaction-table key p12
      ]
    ]
  ]
end


to new-city
  ;set color green set shape "circle"
  ;set size max (list (3 * population / city-max-pop) 0.3)
end