import java.text.SimpleDateFormat
import java.util.Date


logger.level("FINE")


// Parameters
// density
val diffusion = Val[Double]
val diffusionsteps = Val[Double]
val alphalocalization = Val[Double]
val growthrate = Val[Double]

// utility
val laPopCoef = Val[Double]
val laDroadCoef = Val[Double]
val laCloseness = Val[Double]
val laBw = Val[Double]
val laAccessibility = Val[Double]

// network
val nwHeuristic = Val[Double]
val maxNewLinksNumber = Val[Double]

// gravity
val gravityRadius = Val[Double]
val gravityInflexion = Val[Double]
val gravityHierarchyWeight = Val[Double]
val gravityHierarchyExponent = Val[Double]

// breakdown
val breakdownHierarchy = Val[Double]
val breakdownThreshold = Val[Double]

//cost
val costTradeoff = Val[Double]

//biological
val bioThreshold = Val[Double]
val bioSteps = Val[Double]

// time params
val nwUpdateTime = Val[Double]
val totalTime = Val[Double]

val id = Val[Int]
val replication = Val[Int]


// Reporters
// morphology
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]
val rsquared=Val[Double]
// network
val nwDiameter = Val[Double]
val meanPathLength = Val[Double]
val meanBwCentrality = Val[Double]
val meanClosenessCentrality = Val[Double]
val meanRelativeSpeed = Val[Double]
val nwLength = Val[Double]
val nwSize = Val[Double]
//correlations
val rhoPopRoad = Val[Array[Double]]
val rhoPopCloseness = Val[Array[Double]]
val rhoPopBw = Val[Array[Double]]
val rhoPopAccessibility = Val[Array[Double]]
val rhoRoadCloseness = Val[Array[Double]]
val rhoRoadBw = Val[Array[Double]]
val rhoRoadAccess = Val[Array[Double]]
val rhoClosenessBw = Val[Array[Double]]
val rhoClosenessAccessibility = Val[Array[Double]]
val rhoBwAccessibility = Val[Array[Double]]

// model
// setup-experiment [growth-rate density-alpha diffusion-steps diffusion la-pop-coef la-droad-coef la-closeness la-bw la-accessibility nw-heuristic new-links grav-radius grav-inflexion grav-hierarchy-weight grav-exponent brkdn-hierarchy brkdn-th cost-toff bio-threshold bio-steps nw-update-time total-time rseed]
val cmds = List("setup-experiment ${growthrate} ${alphalocalization} ${diffusionsteps} ${diffusion} ${laPopCoef} ${laDroadCoef} ${laCloseness} ${laBw} ${laAccessibility} ${nwHeuristic} ${maxNewLinksNumber} ${gravityRadius} ${gravityInflexion} ${gravityHierarchyWeight} ${gravityHierarchyExponent} ${breakdownHierarchy} ${breakdownThreshold} ${costTradeoff} ${bioThreshold} ${bioSteps} ${nwUpdateTime} ${totalTime} ${replication}","run-experiment")
val model = NetLogo5Task(workDirectory / "HEADLESS_MesoCoEvol.nlogo", cmds,embedWorkspace = true) set (
    inputs += (growthrate,alphalocalization,diffusionsteps,diffusion,laPopCoef,laDroadCoef,laCloseness,laBw,laAccessibility,nwHeuristic,maxNewLinksNumber,gravityRadius,gravityInflexion,gravityHierarchyWeight,gravityHierarchyExponent,breakdownHierarchy,breakdownThreshold,costTradeoff,bioThreshold,bioSteps,nwUpdateTime,totalTime,replication,id),
    outputs += (growthrate,alphalocalization,diffusionsteps,diffusion,laPopCoef,laDroadCoef,laCloseness,laBw,laAccessibility,nwHeuristic,maxNewLinksNumber,gravityRadius,gravityInflexion,gravityHierarchyWeight,gravityHierarchyExponent,breakdownHierarchy,breakdownThreshold,costTradeoff,bioThreshold,bioSteps,nwUpdateTime,totalTime,replication,id),
    netLogoOutputs += ("indicators:morpho:moran", moran),
    netLogoOutputs += ("indicators:morpho:mean-distance", distance),
    netLogoOutputs += ("indicators:morpho:entropy", entropy),
    netLogoOutputs += ("indicators:morpho:slope", slope),
    netLogoOutputs += ("indicators:morpho:slope-rsquared", rsquared),
    netLogoOutputs += ("indicators:network:mean-path-length", meanPathLength),
    netLogoOutputs += ("indicators:network:diameter", nwDiameter),
    netLogoOutputs += ("indicators:network:mean-bw-centrality",meanBwCentrality),
    netLogoOutputs += ("indicators:network:mean-city-closeness-centrality",meanClosenessCentrality),
    netLogoOutputs += ("indicators:network:mean-relative-speed",meanRelativeSpeed),
    netLogoOutputs += ("indicators:network:length",nwLength),
    netLogoOutputs += ("indicators:network:size",nwSize),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-population\" \"patch-distance-to-road\" 5 0",rhoPopRoad),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-population\" \"patch-closeness-centrality\" 5 0",rhoPopCloseness),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-population\" \"patch-bw-centrality\" 5 0",rhoPopBw),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-population\" \"patch-accessibility\" 5 0",rhoPopAccessibility),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-distance-to-road\" \"patch-closeness-centrality\" 5 0",rhoRoadCloseness),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-distance-to-road\" \"patch-bw-centrality\" 5 0",rhoRoadBw),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-distance-to-road\" \"patch-accessibility\" 5 0",rhoRoadAccess),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-closeness-centrality\" \"patch-bw-centrality\" 5 0",rhoClosenessBw),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-closeness-centrality\" \"patch-accessibility\" 5 0",rhoClosenessAccessibility),
    netLogoOutputs += ("indicators:lagged-corrs \"patch-bw-centrality\" \"patch-accessibility\" 5 0",rhoBwAccessibility)
)




// exploration
val exploration = ExplorationTask (
  (LHS(
    10000,
    growthrate in Range(500.0,3000.0),
    alphalocalization in Range(0.1,4.0),
    diffusionsteps in Range(1.0,4.0),
    diffusion in Range(0.05, 0.2),
    laPopCoef in Range(0.0,1.0),
    laDroadCoef in Range(0.0,1.0),
    laCloseness in Range(0.0,1.0),
    laBw in Range(0.0,1.0),
    laAccessibility in Range(0.0,1.0),
    //nwHeuristic in Range(0.0,5.99),
    maxNewLinksNumber in Range(4.0,20.0),
    gravityRadius in Range(1.0,5000.0),
    gravityInflexion in Range(0.1,10.0),
    gravityHierarchyWeight in Range(0.0,1.0),
    gravityHierarchyExponent in Range(0.1,4.0),
    breakdownHierarchy in Range(0.1,4.0),
    breakdownThreshold in Range(1.0,5.0),
    costTradeoff in Range(0.0,0.05),
    bioThreshold in Range(0.3,0.65),
    bioSteps in Range(40.0,100.0),
    nwUpdateTime in Range(1.0,3.99)
  ) withIndex id)
   x (nwHeuristic is 5.5)
   //x (nwUpdateTime is 3.0)
   x (totalTime is 5.0)
   //x (replication in (UniformDistribution[Int]() take 1))
   x (replication in (UniformDistribution[Int]() take 10))
)

val purpose = "LHS_BIOLOGICAL"
//val purpose = "TEST"

// output hook
val indicshook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv")

// env
//val local = LocalEnvironment(1)
val grid = EGIEnvironment("vo.complex-systems.eu",openMOLEMemory = 4000 megabytes)

//exploration -< (model on local hook indicshook)
exploration -< (model on grid by 10 hook indicshook)
