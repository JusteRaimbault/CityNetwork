
;;
; biological network growth

;;
;
to network-biological:grow-network
  
  ; setup
  network-biological:setup
  
  
  
  network-biological:evolve
  
  
  ; simplify
  network-biological:simplify-network
  
  ; extract
  network-biological:to-real-network
  
  ; kill
  network-biological:clear-network
  
  planarize-network cities roads
  
  simplify-network
  
end


;;
;
to network-biological:evolve
  
  foreach [1 2 4] [
    repeat ? * network-biological-steps [  
      network-biological:go 
    ]
    network-biological:kill-weak-links
    network-biological:keep-connex-component
  ]

end



;;
; 
to network-biological:go
  
  debug (word "bionw : tick " bio-ticks)
  
  ;;memorize pipes
  let old-pipes biological-network-links with [diameter > network-biological-threshold]
  
  network-biological:update-pressures
  
  network-biological:update-flows-and-diameters
  
  ;;reporter for convergence tests
  set network-biological-new-links-number count biological-network-links with [diameter > network-biological-threshold and not member? self old-pipes]

  ;;display
  network-biological:update-display

  set bio-ticks bio-ticks + 1

end




;;
; setup nodes and links
to network-biological:setup
  
  ;; globals : as global parameters
  
  ;; setup nodes
  ask patches with [count cities-here > 0] [sprout-biological-network-nodes 1 [set color black set size 0.5 set biological-network-node-number who]]
  
  ask n-of (count patches / 2) (patches with [count biological-network-nodes-here = 0]) [
    sprout-biological-network-nodes 1 [
      set color black set size 0.5 set biological-network-node-number who                   
    ]
  ]
  
  ;; setup links
  
  ; setup following exisiting network
  ask roads [
    let e1 [one-of biological-network-nodes-on patch-here] of end1 let e2 [one-of biological-network-nodes-on patch-here] of end2
    let currentlength road-length
    if e1 != e2 [ask e1 [create-biological-network-link-with e2 [set bio-link-length currentlength set diameter network-biological-initial-diameter set thickness 0.2]]]
  ]
  
  ; mesh
  ask biological-network-nodes [
    create-biological-network-links-with other biological-network-nodes in-radius 1.5 [
      set diameter 1 let di 0 ask end1 [set di distance other-end]
      set bio-link-length di
      set thickness 0.2
      ;set color scale-color grey diameter diameter-max diameter-min
    ]
  ]
  
  ; connex component
  network-biological:keep-connex-component
  
  network-biological:reset-numbers
  
  ; setup o-ds
  
  set bio-ticks 0
  
end


to network-biological:update-pressures
  ;; reset vertices numbers
  network-biological:reset-numbers
  ;; choose OD randomly
  network-biological:choose-OD
  
  ;; solve the system
  let pressures network-biological:solve-system
  
  ask biological-network-nodes [network-biological:set-pressures pressures]
end


to network-biological:update-flows-and-diameters
  set network-biological-diameter-max max [diameter] of biological-network-links
  set network-biological-total-diameter-variation 0
  ask biological-network-links [
    network-biological:update-flow
    network-biological:update-diameters
  ]
end



;;
;
to network-biological:choose-OD
  set network-biological-o n-of (count cities / 2) cities
  set network-biological-d cities with [not member? self network-biological-o]
  ;ask network-biological-o [set network-biological-d one-of other cities]
end


;;
;
to network-biological:reset-numbers
  set network-biological-nodes-number count biological-network-nodes
  let j 0 ask biological-network-nodes [set biological-network-node-number j set j j + 1]
end



;;
;
to-report network-biological:get-flow-matrix
  let nodes-number count biological-network-nodes
  ; (n-1 ; n-1) matrix to avoid singularity ?
  let flow-matrix matrix:make-constant (nodes-number - 1) (nodes-number - 1) 0
  ask biological-network-nodes [
    if biological-network-node-number != nodes-number - 1 [
      let total-flow 0
      ask my-biological-network-links [
        let s diameter / bio-link-length
        set total-flow total-flow + s
        if [biological-network-node-number] of other-end != nodes-number - 1 [
          matrix:set flow-matrix [biological-network-node-number] of myself [biological-network-node-number] of other-end (- s)
        ]
      ]
      matrix:set flow-matrix biological-network-node-number biological-network-node-number total-flow  
    ]                    
  ]

  report flow-matrix
end



;;
;  solve the system
to-report network-biological:solve-system
  let flow-matrix network-biological:get-flow-matrix
  let io-flows network-biological:get-io-flows
  report matrix:solve flow-matrix io-flows
end




to-report network-biological:get-io-flows
  ;; n-1 x 1 matrix
  let ioflows matrix:make-constant (network-biological-nodes-number - 1) 1 0
  
  let number 0
  ask network-biological-o [
    set number [biological-network-node-number] of one-of (biological-network-nodes with-min [distance myself])
    if number != network-biological-nodes-number - 1 [matrix:set ioflows number 0 network-biological-input-flow]
  ]
  
  ask network-biological-d [
    set number [biological-network-node-number] of one-of (biological-network-nodes with-min [distance myself])
    if number != network-biological-nodes-number - 1 [matrix:set ioflows number 0 (- network-biological-input-flow)]
  ]
  
  report ioflows
end


; vertices procedure
;;reset pression matrix
to network-biological:set-pressures [pressures]
  set total-capacity sum [diameter / bio-link-length] of my-biological-network-links
  ifelse biological-network-node-number = network-biological-nodes-number - 1 [
    set pressure 0
  ][
    set pressure matrix:get pressures biological-network-node-number 0
  ]
end

;;
; Computes new flow
to network-biological:update-flow
  set flow diameter / bio-link-length * ([pressure] of end1 - [pressure] of end2)  
end

;;
; update diamaters
to network-biological:update-diameters
  ;; delta t -> should put in one single constant
  let dt 0.05
  let old-diameter diameter
  
  let flow-gamma 1.8
  let var (abs flow) ^ flow-gamma / (1 + (abs flow) ^ flow-gamma)
  
  set diameter dt * var + (1 - dt) * diameter
  
  ;;diameter variation
  set network-biological-total-diameter-variation network-biological-total-diameter-variation + (diameter - old-diameter)
  
end



to network-biological:keep-connex-component
  nw:set-context biological-network-nodes biological-network-links
  let clusters nw:weak-component-clusters let giant first sort-by [count ?1 > count ?2] clusters
  ask biological-network-nodes with [not member? self giant] [ask my-links [die] die]
end


to network-biological:kill-weak-links
  ask biological-network-links with [diameter < network-biological-threshold] [die]
  ask biological-network-nodes with [count my-links = 0] [die]
end


to network-biological:simplify-network
  let n count biological-network-nodes with [count my-biological-network-links < 3]
  while [n > 0] [
    let current-node biological-network-nodes with [count my-biological-network-links < 3]
    ask current-node [
       ifelse count my-biological-network-links = 1 [ask one-of my-biological-network-links [die] die][
         let ends [] let l 0 let d 0 foreach to-list my-biological-network-links [set ends lput [other-end] of ? ends ask ? [set l l + bio-link-length set d d + diameter die]]
         ask first ends [create-biological-network-link-with last ends [set bio-link-length l set diameter d / 2]] die
       ]
    ]
    set n count biological-network-nodes with [count my-biological-network-links < 3] debug n
  ]
end


to network-biological:to-real-network
  ask biological-network-links [
    let e1 nobody let le1 end1 ifelse [count cities-here] of le1 > 0 [set e1 [one-of cities-here] of le1][ask [patch-here] of le1 [sprout-cities 1 [set e1 self]]]
    let e2 nobody let le2 end2 ifelse [count cities-here] of le2 > 0 [set e2 [one-of cities-here] of le2][ask [patch-here] of le2 [sprout-cities 1 [set e2 self]]]
    ask e1 [create-road-with e2 [network:new-road]]
  ]
end



;;
; 
to network-biological:abstract-real-network
  ask biological-network-nodes with [count my-links with [diameter > network-biological-threshold] > 2 ] [
    if not any? biological-network-poles-here [
      hatch-biological-network-poles 1 [
        set size 1
        set real-pressure 0
      ]
    ]
  ]
  ask biological-network-poles [
    let me self
    let aux one-of biological-network-nodes
    let aux1 aux
    ask aux [
      ask my-biological-network-links with [diameter > network-biological-threshold] [
        let not-found true
        ask biological-network-poles-on other-end [
          
          nw:set-context biological-network-nodes biological-network-links
          let dist 0
          ask one-of biological-network-nodes-here[
            set dist nw:distance-to aux
          ]
          
          create-biological-network-real-link-with me [
            set real-link-length dist
          ]
          set not-found false
        ]
        let aux2 aux
        set aux1 other-end
        while [not-found] [
          ask aux1 [
            let s my-biological-network-links with [diameter > network-biological-threshold and other-end != aux2]
            if not any? s [
              set not-found false
              stop
            ]
            ask one-of s [
              ask biological-network-poles-on other-end [
                
                nw:set-context biological-network-nodes biological-network-links
                let dist 0
                ask one-of biological-network-nodes-here[
                  set dist nw:distance-to aux
                ]
          
                create-biological-network-real-link-with me [
                  set real-link-length dist
                ]
                
                
                set not-found false
              ]
              set aux2 aux1
              set aux1 other-end
            ]
          ]
        ]
      ]
    ]
  ]

;ask real-links[
;  
;]


end






to network-biological:clear-network
  ask biological-network-nodes [die]
  ask biological-network-links [die]
end


to network-biological:clear-real-network
  ask biological-network-poles [die]
  ask biological-network-real-links [die]
end


to network-biological:show-links
  ask biological-network-nodes [set hidden? true]
  ask biological-network-links [set hidden? true]
  ask biological-network-links with [diameter > network-biological-threshold] [set color blue set hidden? false ask end1 [set hidden? false] ask end2 [set hidden? false]]
end


to network-biological:update-display
  ask biological-network-links [set hidden? false set color scale-color grey diameter network-biological-diameter-max 0]
  ask biological-network-nodes [set hidden? false set color mean [color] of my-links]
end

