
;;
;  Indicators


;;
; compute and output indicators
to indicators:compute-indicators
  network:cache-nw-measures
  output-print (word "moran = " indicators:morpho:moran)
  output-print (word "entropy = " indicators:morpho:entropy)
  output-print (word "slope = " indicators:morpho:slope)
  output-print (word "slope-rsquared = " indicators:morpho:slope-rsquared)
  output-print (word "mean-distance = " indicators:morpho:mean-distance)
  output-print (word "diameter = " indicators:network:diameter)
  output-print (word "path-length = " indicators:network:mean-path-length)
  output-print (word "bw centrality = " indicators:network:mean-bw-centrality)
  output-print (word "city closeness = " indicators:network:mean-city-closeness-centrality)
  output-print (word "relative speed = " indicators:network:mean-relative-speed)
  output-print (word "network length = " indicators:network:length)
  output-print (word "rho pop-roads = " indicators:lagged-corrs "patch-population" "patch-distance-to-road" 5 0)
  output-print (word "rho pop-clos = " indicators:lagged-corrs "patch-population" "patch-closeness-centrality" 5 0)
  output-print (word "rho pop-bw = " indicators:lagged-corrs "patch-population" "patch-bw-centrality" 5 0)
  output-print (word "rho pop-acc = " indicators:lagged-corrs "patch-population" "patch-accessibility" 5 0)
  output-print (word "rho roads-clos = " indicators:lagged-corrs "patch-distance-to-road" "patch-closeness-centrality" 5 0)
  output-print (word "rho roads-bw = " indicators:lagged-corrs "patch-distance-to-road" "patch-bw-centrality" 5 0)
  output-print (word "rho roads-acc = " indicators:lagged-corrs "patch-distance-to-road" "patch-accessibility" 5 0)
  output-print (word "rho clos-bw = " indicators:lagged-corrs "patch-closeness-centrality" "patch-bw-centrality" 5 0)
  output-print (word "rho clos-acc = " indicators:lagged-corrs "patch-closeness-centrality" "patch-accessibility" 5 0)
  output-print (word "rho bw-acc = " indicators:lagged-corrs "patch-bw-centrality" "patch-accessibility" 5 0)
end


;;
; update tables
to indicators:update-indicators
  let current-time ticks
  foreach indicator-sample-patches [
     ask ? [
       table:put patch-values-table (list current-time "patch-population" pxcor pycor) patch-population
       table:put patch-values-table (list current-time "patch-distance-to-road" pxcor pycor) patch-distance-to-road
       table:put patch-values-table (list current-time "patch-closeness-centrality" pxcor pycor) patch-closeness-centrality
       table:put patch-values-table (list current-time "patch-bw-centrality" pxcor pycor) patch-bw-centrality
       table:put patch-values-table (list current-time "patch-accessibility" pxcor pycor) patch-accessibility
     ]
  ]
end



;;;;;
;; Micro correlations

;; in time

;;
; lagged correlation, between two vars, already
;  assumed var stored
to-report indicators:lagged-correlation [var1 var2 tau t0]
  let current-time ticks
  let x [] let y [] let firstvar var1 let secvar var2
  if tau > 0 [set firstvar var2 set secvar var1]
  let t (tau + 1 + t0)
  repeat (current-time - tau - 1 - t0) [
    foreach indicator-sample-patches [ask ? [
       set x lput ((table:get patch-values-table (list t firstvar [pxcor] of ? [pycor] of ?)) - (table:get patch-values-table (list (t - 1) firstvar [pxcor] of ? [pycor] of ?))) x
       set y lput ((table:get patch-values-table (list (t - tau) secvar [pxcor] of ? [pycor] of ?)) - (table:get patch-values-table (list (t - tau - 1) secvar [pxcor] of ? [pycor] of ?))) y
    ]]
    set t t + 1
  ]
  let mx mean x set x map [? - mx] x let my mean y set y map [? - my] y
  report mean (list-times-element-wise x y) / (standard-deviation x * standard-deviation y)
end


;;
; set of lagged corrs for a given pair of vars
to-report indicators:lagged-corrs [var1 var2 abstaumax t0]
  ; get var values
  let res []
  let tau (- abstaumax)
  repeat abstaumax + 1 [
    set res lput (indicators:lagged-correlation var2 var1 (abs tau) t0) res
    set tau tau + 1
  ]
  repeat abstaumax [
    set res lput (indicators:lagged-correlation var1 var2 tau t0) res
    set tau tau + 1
  ]
  report res
end


;;
; in space

;;
; correlation between two vars
to-report indicators:correlation [var1 var2 time]
  let x [] let y []
  foreach indicator-sample-patches [
    ask ? [
      set x lput (table:get patch-values-table (list time var1 [pxcor] of ? [pycor] of ?)) x
      set y lput (table:get patch-values-table (list time var2 [pxcor] of ? [pycor] of ?)) y
    ]
  ]
  let mx mean x set x map [? - mx] x let my mean y set y map [? - my] y
  report mean (list-times-element-wise x y) / (standard-deviation x * standard-deviation y)
end




;;
; Morphological indicators

to-report indicators:morpho:moran
  report morphology:moran 0
end

to-report indicators:morpho:entropy
  report morphology:entropy 0
end

to-report indicators:morpho:slope
  report first morphology:slope 0
end

to-report indicators:morpho:slope-rsquared
  report last morphology:slope 0
end

to-report indicators:morpho:mean-distance
  report morphology:distance 0
end


;;
;  Network indicators


;;
; nw diameter
;  Normalized by world diag
to-report indicators:network:diameter
  let diag sqrt (world-width ^ 2 + world-height ^ 2)
  report max map [sum map [[road-length] of ?] ?] (utils:table-values shortest-paths) / diag
end


;;
; mean path length
;  Normalized by world diagonal
to-report indicators:network:mean-path-length
  let diag sqrt (world-width ^ 2 + world-height ^ 2)
  report (mean map [sum map [[road-length] of ?] ?] (utils:table-values shortest-paths)) / diag
end

;;
;  bw centrality, normalized by number of paths considered
to-report indicators:network:mean-bw-centrality
  let n count cities
  report (mean [bw-centrality] of roads) * 2 / (n * (n - 1))
end

;;
; nodes bw centrality
to-report indicators:network:mean-city-bw-centrality
  let n count cities
  report (mean [city-bw-centrality] of cities) * 2 / (n * (n - 1))
end

to-report indicators:network:mean-city-closeness-centrality
  let n count cities
  report (mean [city-closeness-centrality] of cities) / n
end

;;
; mean relative speed, already normalized
to-report indicators:network:mean-relative-speed
  report mean utils:table-values nw-relative-speeds
end

;;
; nw length -> not normalized
to-report indicators:network:length
  report sum [road-length] of roads
end

;;
; number of links
to-report indicators:network:size
  report count links
end




to indicators:export-nw [file-prefix]
  let cities-coords [(list xcor ycor who)] of cities
  let roads-ids [(list [who] of end1 [who] of end2)] of roads
  let cities-file (word file-prefix "_cities.csv")
  let roads-file (word file-prefix "_roads.csv")
  
  foreach cities-coords [
    print-in-file cities-file implode-with-delimiter ? ";"
  ]
  
  foreach roads-ids [
    print-in-file roads-file implode-with-delimiter ? ";"
  ]
  
end




