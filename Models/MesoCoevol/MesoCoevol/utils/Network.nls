
;;;;;;;;;;;;;;;;;;;;;;
;; Generic NW functions
;;;;;;;;;;;;;;;;;;;;;;

;extensions [nw context gradient]

;__includes [
; "../agent/AgentSet.nls" 
; "../misc/List.nls"
; "../agent/Link.nls"
; "../agent/Agent.nls"
;]



;;
; Planarize a network, by simply "flattening the bridges" == creating intersection for crossing links
;
;  Necessarily in O(#(edges-agentset)^2) as have to checkall intersections between links.
to planarize-network [vertices-agentset edges-agentset]
  
  debug "planarize..."
  
  ;; gore way ?
  ;let links-breed agentset-uniform-singular-breed edges-agentset
  
  let edge-list to-list edges-agentset
  let current-inter get-first-inter edge-list
  while [length current-inter > 0][
      let l2 last current-inter let l1 item 1 current-inter
      let t11 [end1] of l1 let t12 [end2] of l1 let t21 [end1] of l2 let t22 [end2] of l2
      let new-inter nobody ;need to hatch
      ask t11 [hatch 1 [set city-population 0 new-city set new-inter self setxy first first current-inter last first current-inter]]
      ask new-inter [
        ;ask t11 [run (word "create-" links-breed "-with myself")]
        ;ask t12 [run (word "create-" links-breed "-with myself")]
        ;ask t21 [run (word "create-" links-breed "-with myself")]
        ;ask t22 [run (word "create-" links-breed "-with myself")]
        ask t11 [create-road-with myself]
        ask t12 [create-road-with myself]
        ask t21 [create-road-with myself]
        ask t22 [create-road-with myself]
      ]
      ;remove and kill
      set edge-list concatenate (list edge-list (to-list [my-links] of new-inter))
      set edge-list remove l2 remove l1 edge-list
      ask l1 [die] ask l2 [die]
      set current-inter get-first-inter edge-list
  ]
  
  
;  let remaining-edges to-list edges-agentset
;  
;  ; get breeds
;  let vertices-breed agentset-uniform-breed vertices-agentset
;  ; rq : with hatch the vertices-breed should not be needed ?
;  let links-breed agentset-uniform-singular-breed edges-agentset
;  
;  while [length remaining-edges > 0][
;    let current-edge first remaining-edges set remaining-edges remove-item 0 remaining-edges
;    let to-remove [] let to-add [] let found? false
;    foreach remaining-edges [
;      if not found? [
;        let inter intersection-with-link ? current-edge
;        ;if length inter > 0 [user-message (word current-edge ? inter)]
;        if length inter > 0 [
;           let t11 [end1] of ? let t12 [end2] of ? let t21 [end1] of current-edge let t22 [end2] of current-edge
;           ; create the new intersection and connects it
;           ; dirty because string runs cannot interact with local variables -> use ask to access ends
;           let new-inter nobody ;need to hatch
;           ask t11 [hatch 1 [set new-inter self setxy first inter last inter]]
;           ask new-inter [
;             ask t11 [run (word "create-" links-breed "-with myself")]
;             ask t12 [run (word "create-" links-breed "-with myself")]
;             ask t21 [run (word "create-" links-breed "-with myself")]
;             ask t22 [run (word "create-" links-breed "-with myself")]
;           ]
;           ; add links of new-inter
;           set to-add concatenate (list to-add (to-list [my-links] of new-inter))
;           set to-remove lput ? to-remove
;           set found? true
;       ]
;      ]
;    ]
;    
;    ;;add and remove edges
;    foreach to-add [set remaining-edges lput ? remaining-edges]
;    foreach to-remove [set remaining-edges remove ? remaining-edges ask ? [die]]
;    if found? [ask current-edge [die]]
;  ]
  
end


to-report get-first-inter [link-list]
  let n length link-list let i 0 let j 0
  repeat (n - 1)[
     set j i + 1
     repeat (n - i - 1) [
       let inter strict-intersection-with-link item i link-list item j link-list
       if length inter > 0 [report (list inter  item i link-list  item j link-list)]
       set j j + 1
     ]
     set i i + 1 
  ]
  report []
end






;;;;;;;;;;;;;
;; Connexify nw following std algo 
;;
;; Uses provided turtles and links agentsets.
;
;  Note : resulting nw is not necessary planar ! -> planification primitive, better be separated for more flexibility<
;;;;;;;;;;;;
to connexify-network [vertices-agentset edges-agentset]
  nw:set-context vertices-agentset edges-agentset
  let clusters nw:weak-component-clusters
  let #-new-links length clusters - 1
  
  ;let links-breed agentset-uniform-singular-breed edges-agentset
  
  while [length clusters > 1] [
    let c1 first clusters
    let mi sqrt (world-width ^ 2 + world-height ^ 2) ;biggest possible distance
    ; rq : obliged to go through all pairs in nw. the same as merging clusters and taking closest point
    ; second alternative is less dirty in writing but as merging is O(n^2), should be longer.
    let mc1 nobody let mc2 nobody
    foreach but-first clusters [
       let c2 ?
       ask c1 [ask c2 [let d distance myself if d < mi [set mi d set mc1 myself set mc2 self]]]
    ]
    ask mc1 [
      ; create link : need to find the breed of used links
      ; to color : final number of new links if #-initial clusters - 1
      ;run (word "create-" links-breed "-with mc2"); [set color gradient:scale (list extract-rgb red extract-rgb yellow) (#-new-links - (length clusters)) 0 #-new-links]")
       create-road-with mc2 [network:new-road]
    ]
    set clusters nw:weak-component-clusters
  ]
  
end


to connexify-network-link-projection
  nw:set-context cities roads
  let clusters nw:weak-component-clusters
  let #-new-links length clusters - 1
  
  ;let links-breed agentset-uniform-singular-breed edges-agentset
  
  while [length clusters > 1] [
    ; cluster with most links
    let c1 first clusters let ma sum [count my-links] of c1 foreach but-first clusters [let cl sum [count my-links] of ? if cl > ma [set c1 ? set ma cl]]
    ;show c1
    let c1-links roads with [member? end1 c1 or member? end2 c1]
    ;show c1-links
    
    let mi sqrt (world-width ^ 2 + world-height ^ 2)
    let mc1 nobody let mc2 nobody
    foreach clusters [
      let c2 ? ;show c2
      if c2 != c1 [
        ask c2 [ask c1-links [let d distance-to-point [xcor] of myself [ycor] of myself if d < mi [set mi d set mc1 myself set mc2 self]]]
      ]
    ]
    ask mc1 [
       let inter [link:intersection-with [xcor] of myself [ycor] of myself] of mc2
       ifelse inter = [end1] of mc2 or inter = [end2] of mc2 [create-road-with inter][
          let e1 [end1] of mc2 let e2 [end2] of mc2 ask mc2 [die]
          if inter != self [create-road-with inter [network:new-road]]
          ask inter [create-road-with e1 [network:new-road] create-road-with e2 [network:new-road]]
       ]
    ]
    
    nw:set-context cities roads
    set clusters nw:weak-component-clusters
  ]
  
end


to simplify-network 
  
  debug "simplify..."
  
  let n count cities with [count cities-here > 1]
  while [n > 0] [
    debug n
     let current-city one-of cities with [count cities-here > 1]
     let to-connect [] ask current-city [
       ask other cities-here [
          ask my-roads with [[patch-here] of other-end != [patch-here] of myself] [set to-connect lput other-end to-connect die] die
       ]
       foreach to-connect [if not road-neighbor? ? [create-road-with ? [network:new-road]]]
     ]
     set n count cities with [count cities-here > 1]
  ]
end






