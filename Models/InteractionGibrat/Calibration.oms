import Model._

val fileSetting = ExplorationTask(
  (popFile in Seq( workDirectory / "data" / "pop50.csv")) x
  (distFile in Seq(workDirectory / "data"/ "dist50.csv")) x
  (fdistsFile in Seq(workDirectory / "data" / "distMat_Ncities50_alpha03_n03.csv")) x (id in Seq(1))
) set(
  inputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay),
  outputs += (growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay)
)

val eval = fileSetting -< model

val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 200,
        genome = 
          Seq(
            growthRate in Range(0.0005, 0.007),
            gravityWeight in Range(0.0001,0.01),
            gravityGamma in Range(0.2,3.0),
            gravityDecay in Range(50.0,2000.0),
            feedbackWeight in Range(0.0001,0.01),
            feedbackGamma in Range(0.2,3.0),
            feedbackDecay in Range(1.0,500.0)
          ),
        objectives = Seq(logmse)
      ),
    evaluation = eval,
    termination = 10 minutes
  )
  
val island = IslandEvolution(evolution, parallelism = 15, termination = 200000)

// Define the hook to save the results
val savePopulation = SavePopulationHook(island, workDirectory / "calibration") 

//val grid = EGIEnvironment("vo.complex-systems.eu")
val local = LocalEnvironment(15)

// Define the execution
(island on local hook savePopulation)


