
import Model._

val parameters = Array(growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay)
val bounds = Array((0.005,0.007),(0.001,0.009),(1.5,2.3),(500.0,1500.0),(0.001,0.009),(0.2,1.0),(50.0,300.0))
val steps = Array(0.0005,0.002,0.2,200.0,0.002,0.2,50.0)

val local = LocalEnvironment(15)

def profile(index: Int) = {
   val varname = parameters(index).name
   val indexes = Array.tabulate(6){i => i + (i > index).intValue}
   
   val exploration = ExplorationTask (
    (LHS (
       1,
       parameters(index) in Range(bounds(index)(0),bounds(index)(1))
    ) withIndex id) x
    (parameters(indexes(0)) in (bounds(indexes(0))(0) to bounds(indexes(0))(1) by steps(indexes(0))))x
    (parameters(indexes(1)) in (bounds(indexes(1))(0) to bounds(indexes(1))(1) by steps(indexes(1))))x
    (parameters(indexes(2)) in (bounds(indexes(2))(0) to bounds(indexes(2))(1) by steps(indexes(2))))x
    (parameters(indexes(3)) in (bounds(indexes(3))(0) to bounds(indexes(3))(1) by steps(indexes(3))))x
    (parameters(indexes(4)) in (bounds(indexes(4))(0) to bounds(indexes(4))(1) by steps(indexes(4))))x
    (parameters(indexes(5)) in (bounds(indexes(5))(0) to bounds(indexes(5))(1) by steps(indexes(5))))x
    (popFile in Seq( workDirectory / "data" / "pop50.csv")) x
    (distFile in Seq(workDirectory / "data"/ "dist50.csv")) x
    (fdistsFile in Seq(workDirectory / "data" / "distMat_Ncities50_alpha03_n03.csv"))
  )
  
  val indics_hook = AppendToCSVFileHook(workDirectory / s"gridprofile/test/${varname}.csv")

  exploration -< (modelCapsule hook indics_hook on local)
   
}


val firstCapsule = Capsule(EmptyTask())
val profiles = (0 to 7 by 1).map(profile)
profiles.map(firstCapsule -- _).reduce(_ & _)
  

