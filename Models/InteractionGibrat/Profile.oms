import Model._

val grid = DIRACEnvironment("vo.complex-systems.eu")

def profile(variable: Val[Double]) = {  
  
  val algo =
    GenomeProfile (
      x = variable,
      nX = 100,
      genome = Seq(
        growthRate in Range(0.0005, 0.007),
        gravityWeight in Range(0.0001,0.01),
        gravityGamma in Range(0.2,3.0),
        gravityDecay in Range(50.0,2000.0),
        feedbackWeight in Range(0.0001,0.01),
        feedbackGamma in Range(0.2,3.0),
        feedbackDecay in Range(1.0,500.0)
      ),
      objective = logmse
    )

  // Calibration profile of 1000 points for the parameter
  val evolution = SteadyStateEvolution(
    algorithm = algo,
    evaluation =  modelCapsule,
    termination = 30 minutes
  )

  // Define the island model
  val island = IslandEvolution(evolution, parallelism = 1000, termination = 50000)

  // Define the hook to save the results
  val savePopulation = SavePopulationHook(island, workDirectory / s"profile/${variable.name}/")

  // Define the execution
  (island on grid hook savePopulation)
}

val firstCapsule = Capsule(EmptyTask())
val profiles = Seq(growthRate, gravityWeight, gravityGamma, gravityDecay, feedbackWeight, feedbackGamma,feedbackDecay).map(profile)
profiles.map(firstCapsule -- _).reduce(_ & _)