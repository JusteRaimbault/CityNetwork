import java.io._
//import java.lang.Process
import sys.process._
import java.util.Date

// basic openmole workflow with netlogo model
//
// Test on elaborated model with external sources


// varying parameters

val beta = Val[Double]
val lambda = Val[Double]
val replication = Val[Int]


// exploration task


val exploration =
  ExplorationTask(
    (beta in (10.0 to 20.0 by 10.0)) x
    (lambda in (0.0 to 1.0 by 0.5)) x
    (replication in (UniformDistribution[Int]() take 1))
  )


/*
val exploration =
  ExplorationTask(
    (beta in (10.0 to 100.0 by 10.0)) x
    (lambda in (0.0 to 1.0 by 0.1)) x
    (replication in (UniformDistribution[Int]() take 30))
  )
*/




//define netlogo task


// reporters
val length=Val[Double]
val diameter=Val[Double]


val cmds = List(
  "setup-experiment ${lambda} ${beta}",
  "go-experiment")



// Call external deamon converting NL multiple sources into single file model
// using java Runtime call - is it optimal here in scala ?
  /*val p = Val[java.lang.Process];val reader = Val[java.io.BufferedReader];val line = Val[String]
p=java.lang.Runtime.getRuntime().exec("ls")
p.waitFor()
reader=new BufferedReader(new InputStreamReader(p.getInputStream()))
line=reader.readLine()
while(line!=null) {println(line);line=reader.readLine();}
*/
"./nlaggregator.sh Headless_LocalDistanceMin.nlogo includes" !

//"cat Headless_LocalDistanceMin.nlogo | wc" !


//val model = NetLogo5Task("WRAPPED_Headless_LocalDistanceMin.nlogo",cmds) set (

val workspace = org.openmole.misc.workspace.Workspace()
println(workspace.location)
val embedWorkspace = true
val scriptPath = "./Headless_LocalDistanceMin.nlogo"


val model = NetLogo5Task(scriptPath,cmds,true) set (
  inputs += (lambda, beta),
  netLogoOutputs += ("network-length", length),
  netLogoOutputs += ("network-diameter", diameter),
  outputs += (lambda,beta)
)

// try adding external nls source
// does not work with file source (only for data sources ? test as NetLogo Inputs ? )
/* val files = Val[Array[File]]
val s = ListFilesSource("includes", files)
*/



// output
//val h = ToStringHook()
val h = AppendToCSVFileHook("res/model_"+(new java.util.Date()).toString().replace(" ","_")+".csv")



val startTime = System.currentTimeMillis

// environement
val env = LocalEnvironment(4)


logger.level("FINE")

//val exec = exploration -< (model source s on env hook h) start
val exec = exploration -< (model on env hook h) start

exec.waitUntilEnded

println((System.currentTimeMillis - startTime) / 1000.0)
