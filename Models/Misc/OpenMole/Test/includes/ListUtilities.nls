

;;agentset/list functions

to-report to-list [agentset]
  let res []
  ask agentset [
    set res lput self res 
  ]
  report res
end


;;list to agentset - beware, O(n_agents*length(list))
;;ok
;;should it be in TypeUtilities.nls ?
to-report to-agentset [l]
  if length l = 0 [report nobody]
  if is-turtle? first l [report turtles with [member? self l]]
  if is-patch? first l [report patches with [member? self l]]
  if is-link? first l [report links with [member? self l]]
end



;; normalised norm-p of a vector
;; in this file because applies on a list

to-report norm-p [p l]
  let res 0
  let n length l
  foreach l [set res res + (? ^ p)]
  report (res / n) ^ (1 / p)
end


;;sequence function
to-report seq [from t by]
  let res [] let current-val from let n 0
  ifelse by = 0 [set n t][set n (floor ((t - from)/ by) + 1)]
  repeat n [
     set res lput current-val res
     set current-val current-val + by
  ]
  report res
end

to-report rep [element times]
  let res [] repeat times [set res lput element res] report res
end

to-report incr-item [i l val]
  report replace-item i l (item i l + val)
end


to-report concatenate [lists]
  let res []
  foreach lists [
    foreach ? [
      set res lput ? res 
    ] 
  ]  
  report res
end



;;;;;;;;;;
;; generalized min,max,sum
;;;;;;;;;;

; note : would be better to report \infty for gen-min (generally used for comparisons) but does not exists
to-report gen-min [l]
  ifelse length l = 0 [
    report 0
  ][
     report min l
  ]
end

to-report gen-max [l]
  ifelse length l = 0 [
    report 0
  ][
     report max l
  ]
end

to-report gen-sum [l]
  ifelse length l = 0 [
    report 0
  ][
     report sum l
  ]
end

to-report gen-mean [l]
  ifelse length l = 0 [
    report 0
  ][
     report mean l
  ]
end