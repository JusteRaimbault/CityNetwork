


;;;;;;;;;;;;;;;;;;
;; main
;;;;;;;;;;;;;;;;;;




;; go for one time step
to go
  
  ; first update land values variables
  evolve-land-values
  
  ; construct new centers
  construct-new-centers
  
  ; evolve network
  evolve-network
  
  ; update viz
  update-visualization
  
  tick
end



to evolve-land-values
  ;output-print "updating land values"
  
  
  ; other cases : value proportional to proba, does not evolve
  if centers-distribution = "luti" [
  
    ;; update land value vars : density and accessibility
    ;; grid is given by patches
    
    ;; density
    ;;  note : patch size is arbitrary, normalize var after
    ask patches [set density count centers-here] let ma max [density] of patches ask patches [set density density / ma]
  
  
    ;; accessibility
    ;; need to update bw centralities
    setup-nw-analysis
    compute-node-bw-centrality
    set ma max [node-bw-centrality] of turtles
    ask patches [set accessibility gen-mean [node-bw-centrality] of turtles-here / (max list ma 1)]
    
    ;; update value
    ask patches [set land-value lambda * accessibility + (1 - lambda) * (1 - density)]
    
    ;; diffuse land value to obtain sort of smoothing
    repeat 10 [diffuse land-value 0.5]
    
  ]

end


to construct-new-centers
  
  ; hide centers (to hightlight new after)
  ask centers [set hidden? true]
  
  ; random new centers number
  let new-centers-number 0
  ifelse random-center-number?[set new-centers-number 1 + (random max-new-centers-number)][set new-centers-number max-new-centers-number]
  
  set new-centers []
  ; assume each are drawn independantly according to a given spatial proba distribution
  repeat new-centers-number[
     set new-centers lput new-center new-centers
  ]
  set new-centers to-agentset new-centers ; dirty in complexity :/
  
  
  
end

to evolve-network
  ;output-print "evolving nw"
  
  let nodes-to-connect []
  ; for each new center, find neighbor nodes
  ask new-centers [
    
     ; supplementary rule : if new center is closer from nw than another node, connects it perpendicularly
     ; complexity
     ;  -> returns nodes that are indeed neighs but that should not be connected because center perp. connected to the network
     let not-neighs connect-to-network
    
     ; find neighbors ; checking of neigh condition here is detailed in direct-neighbor-nodes function
     set neigh-nodes direct-neighbor-nodes with [not link-neighbor? myself]
     ; remove potential extremities of old link
     foreach not-neighs [set neigh-nodes remove-from-agentset ? neigh-nodes]
     ;show neigh-nodes
     if neigh-nodes != nobody [
       ask neigh-nodes [
         set nodes-to-connect lput self nodes-to-connect
       ]
     ]
  ]
  
  ; remove duplicates from nodes to connect
  ; then connects each to corresponding centers
  set nodes-to-connect remove-duplicates nodes-to-connect
  
  ;show nodes-to-connect
  
  
  foreach nodes-to-connect [
     ; find centers such that ? \in neigh-nodes
     ; connect node to weighted barycenter of these
     ; then connect new node to each (induces local tree-like structure)
     let current-centers-to-connect new-centers with [neigh-nodes != nobody and member? ? neigh-nodes]
     ifelse count current-centers-to-connect = 1 [
        ask one-of current-centers-to-connect [create-road-with ? [new-road]]
     ][
       let x-bar sum ([weight * xcor] of current-centers-to-connect) / sum ([weight] of current-centers-to-connect)
       let y-bar sum ([weight * ycor] of current-centers-to-connect) / sum ([weight] of current-centers-to-connect)
       ;create barycenter and connects it
       create-nodes 1 [
         setxy x-bar y-bar set hidden? true
         create-road-with ? [new-road]
         create-roads-with current-centers-to-connect [new-road]
       ]
     ]
  ]
  
  
  
  
  ;; supplementary connexification step
  connexify-global-network
  
  
end
  


