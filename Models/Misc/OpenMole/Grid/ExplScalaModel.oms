import java.text.SimpleDateFormat
import java.util.Date
import scala.sys.process._
import density._

logger.level("FINE")

// Parameters
val diffusion = Val[Double]
val diffusionsteps = Val[Double]
val alphalocalization = Val[Double]
val growthrate = Val[Double]
val population = Val[Double]
val replication = Val[Int]

// Reporters
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]
val rsquared=Val[Double]

// delete old tmp dir
// this trick of tmp files with unique identifier is needed because scala task is embedded in main task
// not copied in an external dir such as for a NetLogo task
//("rm -r -f tmp/").!
("mkdir tmp").!

val task =
  ScalaTask(
    """
      | val gen = new PADGeneratorLauncher
      | gen.main(100,input.population,input.diffusion,input.diffusionsteps,input.growthrate,input.alphalocalization,input.replication)
      | val moran = gen.moran
      | val distance = gen.distance
      | val entropy = gen.entropy
      | val slope = gen.slope
      | val rsquared = gen.rsquared
    """.stripMargin
  ) set (
    imports += "density._",
    inputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication),
    outputs += (diffusion,diffusionsteps,alphalocalization,growthrate,population,replication),
    outputs += (moran,distance,entropy,slope,rsquared)
    )


/*
val exploration =  ExplorationTask(
  (diffusion in (0.01 to 0.01 by 1.0)) x
    (diffusionsteps in (2.0 to 2.0 by 1.0)) x
    (alphalocalization in (1.2 to 1.2 by 1.0)) x
    (growthrate in (1000.0 to 1000.0 by 1.0)) x
    (population in (1000000.0 to 1000000.0 by 1.0)) x
    (replication in (UniformDistribution[Int]() take 64))
)
val purpose = "TEST_GRID"
*/



// refined bounds from first exploration
val exploration = ExplorationTask (
  LHS (
    6,
    diffusion in Range(0.0, 0.5),
    alphalocalization in Range(0.5,2.5),
    growthrate in Range(500.0,30000.0),
    population in Range(10000.0,1000000.0),
    diffusionsteps in Range(1.0,5.0)
  ) x (replication in UniformDistribution[Int]() take 10)
)
//val purpose = "LHSsampling"
val purpose = "TEST_GRID"

val h = AppendToCSVFileHook(workDirectory / ((new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new Date()))+"_"+purpose+".csv")

val startTime = System.currentTimeMillis

// environement
//val env = LocalEnvironment(4)
val grid = EGIEnvironment("vo.complex-systems.eu", openMOLEMemory = 1200, wallTime = 1 hours)



exploration -< (task on grid hook h)
//val ex = exploration -< (task on env hook h) start



//println("Total Ellapsed Time is "+(System.currentTimeMillis - startTime) / 1000.0)
