

;;;;
;; Synthetic generation of cities
;;;;






to generate-cities
  
  set-population-distribution
 
  foreach populations [
     let current-city nobody
     create-cities 1 [
       set population ? set current-city self new-synth-city
     ]
     update-patches-weighted-pop
     let p next-christaller-patch
     ask current-city [move-to p setxy (xcor - 0.5 + random-float 1) (ycor - 0.5 + random-float 1)]
   ]
  
  ;set max-pop max [population] of cities
  
end


;;
; Updates patch variables which are distance-weighted sum of population
;  (to be used for christaller patch selection)
to update-patches-weighted-pop
  ask patches [
    set distance-weighted-total-pop sum [distance myself / population] of cities
  ]
end

;;
;  Get randomly the next christaller patch
;  drawn according to proba prop to distance-weighted sum of pop
;   Q : filter on bord patches for example ?
to-report next-christaller-patch
  let tot sum [distance-weighted-total-pop] of patches let s 0 let r random-float 1 let found? false let res one-of patches
  ask patches [set s s + distance-weighted-total-pop / tot if s > r and not found? [set res self set found? true]]
  report res
end


;;
; get list of cities population
;  for now rank-size law
;  P_i : P_max / i^alpha
to set-population-distribution
  set populations []
  let i 1
  repeat #-cities [
    set populations lput (city-max-pop / (i ^ rank-size-exponent)) populations
    set i i + 1 
  ]
end



to new-synth-city
  set color green set shape "circle"
  set size max (list (3 * population / city-max-pop) 0.3)
end