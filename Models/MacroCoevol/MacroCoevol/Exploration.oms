import java.text.SimpleDateFormat
import java.util.Date

logger.level("FINE")

// Parameters
val period = Val[String]
val growthRate = Val[Double]
val gravityWeight = Val[Double]
val gravityGamma = Val[Double]
val gravityDecay = Val[Double]
val gravityAlpha = Val[Double]
val feedbackWeight = Val[Double]
val feedbackGamma = Val[Double]
val feedbackDecay = Val[Double]
val nwType = Val[Int]
val nwThreshold = Val[Double]
val nwExponent = Val[Double]
val nwGmax = Val[Double]

val id = Val[Int]
val replication = Val[Int]

// Reporters
val logmsepop=Val[Double]
val mselogpop=Val[Double]
val logmsedist=Val[Double]

//setup-experiment-real-calibration calibperiod growthrate grav-weight grav-gamma grav-decay feed-weight feed-gamma feed-decay nw-type nw-threshold nw-exp nw-gmax
val cmds = Seq("setup-experiment-real-calibration \"${period}\" ${growthRate} ${gravityWeight} ${gravityGamma} ${gravityDecay} ${feedbackWeight} ${feedbackGamma} ${feedbackDecay} ${nwType} ${nwThreshold} ${nwExponent} ${nwGmax}","run-experiment")

// Model
val model =
NetLogo5Task.workspace(workDirectory,"HEADLESS_MacroCoEvol.nlogo",cmds) set(
    inputs += (period,growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay,nwType,nwThreshold,nwExponent,nwGmax),
    outputs += (period,growthRate,gravityWeight,gravityGamma,gravityDecay,feedbackWeight,feedbackGamma,feedbackDecay,nwType,nwThreshold,nwExponent,nwGmax),
    netLogoOutputs += ("log-mse-population", logmsepop),
    netLogoOutputs += ("mse-log-population", mselogpop),
    netLogoOutputs += ("log-mse-distance", logmsedist)
)

val currentperiod = "1831-1851"

val exploration =  ExplorationTask(
  ((LHS (
    1
    ,growthRate in Range(0.0, 0.1)
    ,gravityWeight in Range(0.0,0.001)
    ,gravityGamma in Range(0.0,2.0)
    ,gravityDecay in Range(0.0,200.0)
    ,nwThreshold in Range(0.0,10.0)
    ,nwExponent in Range(0.0,10.0)
    ,nwGmax in Range(0.0,0.1)
  )) withIndex id)
  x (period is currentperiod)
  x (feedbackWeight is 0.0)
  x (feedbackGamma is 1.0)
  x (feedbackDecay is 1.0)
  x (nwType is 1)
  x (replication in (UniformDistribution[Int]() take 10))
)


val purpose = "test_"+currentperiod

// output
val indics_hook = AppendToCSVFileHook(workDirectory / "exploration" / ((new SimpleDateFormat("yyyyMMdd_HHmmss")).format(new Date()))+"_"+purpose+".csv") set (
  arraysOnSingleRow := true
)


val local = LocalEnvironment(10)

exploration -< (model on local hook indics_hook)

