import Model._

val fileSetting = ExplorationTask(
  (popFile is workDirectory / "data" / "pop50.csv") x
  (distFile is workDirectory / "data"/ "dist50.csv") x
  (fdistsFile is workDirectory / "data" / "distMat_Ncities50_alpha03_n03.csv") x
  (dateFile is workDirectory / "data" / "dates.csv") x
  (id is 1) x (gravityAlpha is 0.0) x
  //(feedbackWeight is 0.0) x (feedbackGamma is 1.0) x (feedbackDecay is 1.0) 
  //(growthRate is 0.06906741) x 
  (growthRate is 0.01334922)x (gravityWeight is 0.0001287938) x 
  (gravityGamma is 3.82252) x (gravityDecay is 401997651796.0)//0.01334922  0.0001287938      3.82252 401997651796
) set(
  inputs += (/*growthRate,gravityWeight,gravityGamma,gravityDecay,*/feedbackWeight,feedbackGamma,feedbackDecay),
  outputs += (/*growthRate,gravityWeight,gravityGamma,gravityDecay,*/feedbackWeight,feedbackGamma,feedbackDecay)
)

val eval = fileSetting -< model

val evolution =
  SteadyStateEvolution(
    algorithm =   
      NSGA2(
        mu = 200,
        genome = 
          Seq(
            /*growthRate in Range(0.0, 1.0),
            gravityWeight in Range(0.0,1.0),
            gravityGamma in Range(0.0,100.0),
            gravityDecay in Range(0.0,1e15),*/
            feedbackWeight in Range(0.0,1.0),
            feedbackGamma in Range(0.0,5.0),
            feedbackDecay in Range(0.0,1e15)
          ),
        objectives = Seq(logmse,mselog)
      ),
    evaluation = eval,
    termination = 5 minutes
  )
  
val island = IslandEvolution(evolution, parallelism = 30, termination = 500)

// Define the hook to save the results
val savePopulation = SavePopulationHook(island, workDirectory / "calibration" / "20160920_fixedgravity_local" ) 

//val grid = EGIEnvironment("vo.complex-systems.eu")
val local = LocalEnvironment(30)

// Define the execution
(island on local hook savePopulation)


